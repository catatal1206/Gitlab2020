{"version":3,"sources":["webpack://WebglAddon/webpack/universalModuleDefinition","webpack://WebglAddon/webpack/bootstrap","webpack://WebglAddon/./src/WebglUtils.ts","webpack://WebglAddon//home/vsts/work/1/s/src/common/buffer/Constants.ts","webpack://WebglAddon/./src/RenderModel.ts","webpack://WebglAddon//home/vsts/work/1/s/src/common/TypedArrayUtils.ts","webpack://WebglAddon//home/vsts/work/1/s/src/common/buffer/AttributeData.ts","webpack://WebglAddon/./src/renderLayer/BaseRenderLayer.ts","webpack://WebglAddon/./src/atlas/CharAtlasCache.ts","webpack://WebglAddon/./src/atlas/CharAtlasUtils.ts","webpack://WebglAddon//home/vsts/work/1/s/src/browser/renderer/atlas/Constants.ts","webpack://WebglAddon//home/vsts/work/1/s/src/common/buffer/CellData.ts","webpack://WebglAddon/./src/WebglAddon.ts","webpack://WebglAddon/./src/WebglRenderer.ts","webpack://WebglAddon/./src/GlyphRenderer.ts","webpack://WebglAddon/./src/TypedArray.ts","webpack://WebglAddon/./src/renderLayer/LinkRenderLayer.ts","webpack://WebglAddon/./src/atlas/WebglCharAtlas.ts","webpack://WebglAddon//home/vsts/work/1/s/src/browser/Color.ts","webpack://WebglAddon/./src/renderLayer/CursorRenderLayer.ts","webpack://WebglAddon//home/vsts/work/1/s/src/common/input/TextDecoder.ts","webpack://WebglAddon/./src/RectangleRenderer.ts","webpack://WebglAddon//home/vsts/work/1/s/src/common/Lifecycle.ts","webpack://WebglAddon//home/vsts/work/1/s/src/common/EventEmitter.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","createShader","gl","type","source","shader","throwIfFalsy","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","deleteShader","Error","PROJECTION_MATRIX","Float32Array","vertexSource","fragmentSource","program","createProgram","attachShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","max","newLength","Math","min","length","newArray","DEFAULT_COLOR","DEFAULT_ATTR","CHAR_DATA_ATTR_INDEX","CHAR_DATA_CHAR_INDEX","CHAR_DATA_WIDTH_INDEX","CHAR_DATA_CODE_INDEX","NULL_CELL_CHAR","NULL_CELL_WIDTH","NULL_CELL_CODE","WHITESPACE_CELL_CHAR","WHITESPACE_CELL_WIDTH","WHITESPACE_CELL_CODE","RENDER_MODEL_INDICIES_PER_CELL","RENDER_MODEL_BG_OFFSET","RENDER_MODEL_FG_OFFSET","COMBINED_CHAR_BIT_MASK","this","cells","Uint32Array","lineLengths","selection","hasSelection","columnSelectMode","viewportStartRow","viewportEndRow","viewportCappedStartRow","viewportCappedEndRow","startCol","endCol","resize","cols","rows","indexCount","clear","fill","clearSelection","RenderModel","fillFallback","array","start","end","a","b","result","constructor","set","fg","bg","extended","ExtendedAttrs","toColorRGB","fromColorRGB","clone","newObj","AttributeData","isInverse","isBold","isUnderline","isBlink","isInvisible","isItalic","isDim","getFgColorMode","getBgColorMode","isFgRGB","isBgRGB","isFgPalette","isBgPalette","isFgDefault","isBgDefault","isAttributeDefault","getFgColor","getBgColor","hasExtendedAttrs","updateExtended","isEmpty","getUnderlineColor","underlineColor","getUnderlineColorMode","isUnderlineColorRGB","isUnderlineColorPalette","isUnderlineColorDefault","getUnderlineStyle","underlineStyle","_container","id","zIndex","_alpha","_colors","_scaledCharWidth","_scaledCharHeight","_scaledCellWidth","_scaledCellHeight","_scaledCharLeft","_scaledCharTop","_canvas","document","createElement","classList","add","style","toString","_initCanvas","appendChild","dispose","removeChild","_charAtlas","_ctx","getContext","alpha","_clearAll","onOptionsChanged","terminal","onBlur","onFocus","onCursorMove","onGridChanged","startRow","endRow","onSelectionChanged","setColors","colorSet","_refreshCharAtlas","_setTransparency","oldCanvas","cloneNode","replaceChild","acquireCharAtlas","warmUp","dim","scaledCellWidth","scaledCellHeight","scaledCharWidth","scaledCharHeight","scaledCharLeft","scaledCharTop","width","scaledCanvasWidth","height","scaledCanvasHeight","canvasWidth","canvasHeight","_fillCells","x","y","fillRect","_fillBottomLineAtCells","devicePixelRatio","_fillLeftLineAtCell","_strokeRectAtCell","lineWidth","strokeRect","clearRect","fillStyle","background","css","_clearCells","_fillCharTrueColor","cell","font","_getFont","textBaseline","_clipRow","fillText","getChars","beginPath","rect","clip","getOption","BaseRenderLayer","charAtlasCache","colors","newConfig","generateConfig","ownedByIndex","entry","ownedBy","indexOf","configEquals","config","atlas","splice","push","newEntry","WebglCharAtlas","index","NULL_COLOR","rgba","clonedColors","foreground","cursor","cursorAccent","selectionOpaque","ansi","slice","contrastCache","fontFamily","fontSize","fontWeight","fontWeightBold","allowTransparency","drawBoldTextInBrightColors","minimumContrastRatio","colorCode","INVERTED_DEFAULT_COLOR","DIM_OPACITY","CHAR_ATLAS_CELL_SPACING","content","combinedData","fromCharData","obj","CellData","setFromCharData","isCombined","getWidth","stringFromCodePoint","getCode","charCodeAt","combined","code","second","getAsCharData","_preserveDrawingBuffer","activate","element","_terminal","renderService","_core","_renderService","_colorManager","_renderer","WebglRenderer","setRenderer","_createRenderer","onResize","undefined","textureAtlas","WebglAddon","preserveDrawingBuffer","_model","_workCell","_onRequestRedraw","EventEmitter","_renderLayers","LinkRenderLayer","screenElement","CursorRenderLayer","dimensions","actualCellWidth","actualCellHeight","_devicePixelRatio","_updateDimensions","contextAttributes","antialias","depth","_gl","_rectangleRenderer","RectangleRenderer","_glyphRenderer","GlyphRenderer","onCharSizeChanged","_isAttached","body","contains","event","forEach","cacheCanvas","reset","updateSelection","onDevicePixelRatioChange","setDimensions","_updateSelectionModel","fire","setAtlas","registerCharacterJoiner","handler","deregisterCharacterJoiner","joinerId","renderRows","_charSizeService","beginFrame","_updateModel","render","row","buffer","ydisp","line","lines","loadCell","chars","updateCell","updateBackgrounds","active","viewportY","floor","ceil","round","Disposable","BYTES_PER_CELL","BYTES_PER_ELEMENT","_dimensions","_activeBuffer","_vertices","count","attributes","attributesBuffers","selectionAttributes","_program","_projectionLocation","getUniformLocation","_resolutionLocation","_textureLocation","_vertexArrayObject","createVertexArray","bindVertexArray","unitQuadVertices","unitQuadVerticesBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","unitQuadElementIndices","Uint8Array","elementIndicesBuffer","ELEMENT_ARRAY_BUFFER","_attributesBuffer","vertexAttribDivisor","_atlasTexture","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","_atlas","_updateCell","rasterizedGlyph","getRasterizedGlyphCombinedChar","getRasterizedGlyph","offset","size","texturePositionClipSpace","sizeClipSpace","model","_updateSelectionRange","startRowEndCol","middleRowsCount","workCell","_getColorFromAnsiIndex","arr","c2","getLine","getCell","idx","viewport","canvas","newCount","renderModel","isSelectionVisible","useProgram","activeBuffer","bufferLength","si","sub","subarray","STREAM_DRAW","hasCanvasChanged","uniform1i","activeTexture","TEXTURE0","generateMipmap","uniformMatrix4fv","uniform2f","drawElementsInstanced","TRIANGLES","sliceFallback","container","linkifier","onShowLinkUnderline","e","_onShowLinkUnderline","onHideLinkUnderline","_onHideLinkUnderline","linkifier2","_state","_clearCurrentLink","x1","y1","middleRowCount","y2","x2","is256Color","TEXTURE_CAPACITY","TEXTURE_HEIGHT","TRANSPARENT_COLOR","NULL_RASTERIZED_GLYPH","texturePosition","_config","_didWarmUp","_cacheMap","_cacheMapCombined","_currentRowY","_currentRowX","_currentRowHeight","_workBoundingBox","top","left","bottom","right","_workAttributeData","_cacheCtx","_tmpCanvas","TMP_CANVAS_GLYPH_PADDING","_tmpCtx","parentElement","_doWarmUp","_drawToCache","rasterizedGlyphSet","rasterizedGlyphSetBg","_getBackgroundColor","bgColorMode","bgColor","inverse","toPaddedHex","_getForegroundCss","fgColorMode","fgColor","bold","minimumContrastCss","_getMinimumContrastCss","channels","toCss","substr","_resolveBackgroundRgba","_resolveForegroundRgba","adjustedColor","getCss","bgRgba","fgRgba","ensureContrastRatio","setCss","codeOrChars","String","fromCharCode","save","italic","temp","temp2","backgroundColor","globalCompositeOperation","fontStyle","globalAlpha","restore","imageData","getImageData","color","g","data","clearColor","_findGlyphBoundingBox","clippedImageData","_clipImageData","putImageData","boundingBox","found","alphaOffset","clippedData","Uint8ClampedArray","oldOffset","newOffset","ImageData","rgb","contrastRatio","l1","l2","toRgba","blend","fgR","fgG","fgB","bgR","bgG","bgB","ratio","toColor","opaque","rgbaColor","toChannels","parseInt","relativeLuminance2","rs","gs","bs","pow","relativeLuminance","reduceLuminance","cr","increaseLuminance","bgL","fgL","_onRequestRefreshRowsEvent","_cell","isFocused","_cursorRenderers","_renderBarCursor","_renderBlockCursor","_renderUnderlineCursor","_clearCursor","_cursorBlinkStateManager","pause","cursorY","resume","CursorBlinkStateManager","_render","restartBlinkAnimation","isPaused","triggeredByAnimationFrame","_coreService","isCursorInitialized","isCursorHidden","baseY","viewportRelativeCursorY","cursorX","isTerminalFocused","cursorStyle","_renderBlurCursor","isCursorVisible","strokeStyle","_renderCallback","_restartInterval","_blinkStartTimeout","_blinkInterval","clearInterval","clearTimeout","_animationFrame","cancelAnimationFrame","_animationTimeRestarted","Date","now","requestAnimationFrame","timeToStart","setTimeout","time","setInterval","activeElement","textarea","hasFocus","codePoint","codepoint","_interim","decode","input","target","startPos","StringToUtf32","interim","byte1","byte2","byte3","byte4","discardInterim","cp","pos","tmp","missing","fourStop","Utf8ToUtf32","BYTES_PER_RECTANGLE","_updateCachedColors","DYNAMIC_DRAW","_updateViewportRectangle","_bgFloat","_colorToFloat32Array","_selectionFloat","_addRectangleFloat","INDICES_PER_RECTANGLE","vertices","rectangleCount","currentStartX","currentBg","currentFg","currentInverse","modelIndex","_updateRectangle","startX","endX","expandFloat32Array","_addRectangle","_disposables","_isDisposed","register","unregister","disposeArray","disposables","_listeners","_disposed","_event","listener","arg1","arg2","queue","from","to"],"mappings":"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","file":"xterm-addon-webgl.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WebglAddon\"] = factory();\n\telse\n\t\troot[\"WebglAddon\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * A matrix that when multiplies will translate 0-1 coordinates (left to right,\n * top to bottom) to clip space.\n */\nexport const PROJECTION_MATRIX = new Float32Array([\n  2, 0, 0, 0,\n  0, -2, 0, 0,\n  0, 0, 1, 0,\n  -1, 1, 0, 1\n]);\n\nexport function createProgram(gl: WebGLRenderingContext, vertexSource: string, fragmentSource: string): WebGLProgram | undefined {\n  const program = throwIfFalsy(gl.createProgram());\n  gl.attachShader(program, throwIfFalsy(createShader(gl, gl.VERTEX_SHADER, vertexSource)));\n  gl.attachShader(program, throwIfFalsy(createShader(gl, gl.FRAGMENT_SHADER, fragmentSource)));\n  gl.linkProgram(program);\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (success) {\n    return program;\n  }\n\n  console.error(gl.getProgramInfoLog(program));\n  gl.deleteProgram(program);\n}\n\nexport function createShader(gl: WebGLRenderingContext, type: number, source: string): WebGLShader | undefined {\n  const shader = throwIfFalsy(gl.createShader(type));\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  if (success) {\n    return shader;\n  }\n\n  console.error(gl.getShaderInfoLog(shader));\n  gl.deleteShader(shader);\n}\n\nexport function expandFloat32Array(source: Float32Array, max: number): Float32Array {\n  const newLength = Math.min(source.length * 2, max);\n  const newArray = new Float32Array(newLength);\n  for (let i = 0; i < source.length; i++) {\n    newArray[i] = source[i];\n  }\n  return newArray;\n}\n\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\n  if (!value) {\n    throw new Error('value must not be falsy');\n  }\n  return value;\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const DEFAULT_COLOR = 256;\nexport const DEFAULT_ATTR = (0 << 18) | (DEFAULT_COLOR << 9) | (256 << 0);\n\nexport const CHAR_DATA_ATTR_INDEX = 0;\nexport const CHAR_DATA_CHAR_INDEX = 1;\nexport const CHAR_DATA_WIDTH_INDEX = 2;\nexport const CHAR_DATA_CODE_INDEX = 3;\n\n/**\n * Null cell - a real empty cell (containing nothing).\n * Note that code should always be 0 for a null cell as\n * several test condition of the buffer line rely on this.\n */\nexport const NULL_CELL_CHAR = '';\nexport const NULL_CELL_WIDTH = 1;\nexport const NULL_CELL_CODE = 0;\n\n/**\n * Whitespace cell.\n * This is meant as a replacement for empty cells when needed\n * during rendering lines to preserve correct aligment.\n */\nexport const WHITESPACE_CELL_CHAR = ' ';\nexport const WHITESPACE_CELL_WIDTH = 1;\nexport const WHITESPACE_CELL_CODE = 32;\n\n/**\n * Bitmasks for accessing data in `content`.\n */\nexport const enum Content {\n  /**\n   * bit 1..21    codepoint, max allowed in UTF32 is 0x10FFFF (21 bits taken)\n   *              read:   `codepoint = content & Content.codepointMask;`\n   *              write:  `content |= codepoint & Content.codepointMask;`\n   *                      shortcut if precondition `codepoint <= 0x10FFFF` is met:\n   *                      `content |= codepoint;`\n   */\n  CODEPOINT_MASK = 0x1FFFFF,\n\n  /**\n   * bit 22       flag indication whether a cell contains combined content\n   *              read:   `isCombined = content & Content.isCombined;`\n   *              set:    `content |= Content.isCombined;`\n   *              clear:  `content &= ~Content.isCombined;`\n   */\n  IS_COMBINED_MASK = 0x200000,  // 1 << 21\n\n  /**\n   * bit 1..22    mask to check whether a cell contains any string data\n   *              we need to check for codepoint and isCombined bits to see\n   *              whether a cell contains anything\n   *              read:   `isEmpty = !(content & Content.hasContent)`\n   */\n  HAS_CONTENT_MASK = 0x3FFFFF,\n\n  /**\n   * bit 23..24   wcwidth value of cell, takes 2 bits (ranges from 0..2)\n   *              read:   `width = (content & Content.widthMask) >> Content.widthShift;`\n   *                      `hasWidth = content & Content.widthMask;`\n   *                      as long as wcwidth is highest value in `content`:\n   *                      `width = content >> Content.widthShift;`\n   *              write:  `content |= (width << Content.widthShift) & Content.widthMask;`\n   *                      shortcut if precondition `0 <= width <= 3` is met:\n   *                      `content |= width << Content.widthShift;`\n   */\n  WIDTH_MASK = 0xC00000,   // 3 << 22\n  WIDTH_SHIFT = 22\n}\n\nexport const enum Attributes {\n  /**\n   * bit 1..8     blue in RGB, color in P256 and P16\n   */\n  BLUE_MASK = 0xFF,\n  BLUE_SHIFT = 0,\n  PCOLOR_MASK = 0xFF,\n  PCOLOR_SHIFT = 0,\n\n  /**\n   * bit 9..16    green in RGB\n   */\n  GREEN_MASK = 0xFF00,\n  GREEN_SHIFT = 8,\n\n  /**\n   * bit 17..24   red in RGB\n   */\n  RED_MASK = 0xFF0000,\n  RED_SHIFT = 16,\n\n  /**\n   * bit 25..26   color mode: DEFAULT (0) | P16 (1) | P256 (2) | RGB (3)\n   */\n  CM_MASK = 0x3000000,\n  CM_DEFAULT = 0,\n  CM_P16 = 0x1000000,\n  CM_P256 = 0x2000000,\n  CM_RGB = 0x3000000,\n\n  /**\n   * bit 1..24  RGB room\n   */\n  RGB_MASK = 0xFFFFFF\n}\n\nexport const enum FgFlags {\n  /**\n   * bit 27..31 (32th bit unused)\n   */\n  INVERSE = 0x4000000,\n  BOLD = 0x8000000,\n  UNDERLINE = 0x10000000,\n  BLINK = 0x20000000,\n  INVISIBLE = 0x40000000\n}\n\nexport const enum BgFlags {\n  /**\n   * bit 27..32 (upper 3 unused)\n   */\n  ITALIC = 0x4000000,\n  DIM = 0x8000000,\n  HAS_EXTENDED = 0x10000000\n}\n\nexport const enum UnderlineStyle {\n  NONE = 0,\n  SINGLE = 1,\n  DOUBLE = 2,\n  CURLY = 3,\n  DOTTED = 4,\n  DASHED = 5\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderModel, ISelectionRenderModel } from './Types';\nimport { fill } from 'common/TypedArrayUtils';\n\nexport const RENDER_MODEL_INDICIES_PER_CELL = 3;\nexport const RENDER_MODEL_BG_OFFSET = 1;\nexport const RENDER_MODEL_FG_OFFSET = 2;\n\nexport const COMBINED_CHAR_BIT_MASK = 0x80000000;\n\nexport class RenderModel implements IRenderModel {\n  public cells: Uint32Array;\n  public lineLengths: Uint32Array;\n  public selection: ISelectionRenderModel;\n\n  constructor() {\n    this.cells = new Uint32Array(0);\n    this.lineLengths = new Uint32Array(0);\n    this.selection = {\n      hasSelection: false,\n      columnSelectMode: false,\n      viewportStartRow: 0,\n      viewportEndRow: 0,\n      viewportCappedStartRow: 0,\n      viewportCappedEndRow: 0,\n      startCol: 0,\n      endCol: 0\n    };\n  }\n\n  public resize(cols: number, rows: number): void {\n    const indexCount = cols * rows * RENDER_MODEL_INDICIES_PER_CELL;\n    if (indexCount !== this.cells.length) {\n      this.cells = new Uint32Array(indexCount);\n      this.lineLengths = new Uint32Array(rows);\n    }\n  }\n\n  public clear(): void {\n    fill(this.cells, 0, 0);\n    fill(this.lineLengths, 0, 0);\n    this.clearSelection();\n  }\n\n  public clearSelection(): void {\n    this.selection.hasSelection = false;\n    this.selection.viewportStartRow = 0;\n    this.selection.viewportEndRow = 0;\n    this.selection.viewportCappedStartRow = 0;\n    this.selection.viewportCappedEndRow = 0;\n    this.selection.startCol = 0;\n    this.selection.endCol = 0;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport type TypedArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\n\n\n/**\n * polyfill for TypedArray.fill\n * This is needed to support .fill in all safari versions and IE 11.\n */\nexport function fill<T extends TypedArray>(array: T, value: number, start?: number, end?: number): T {\n  // all modern engines that support .fill\n  if (array.fill) {\n    return array.fill(value, start, end) as T;\n  }\n  return fillFallback(array, value, start, end);\n}\n\nexport function fillFallback<T extends TypedArray>(array: T, value: number, start: number = 0, end: number = array.length): T {\n  // safari and IE 11\n  // since IE 11 does not support Array.prototype.fill either\n  // we cannot use the suggested polyfill from MDN\n  // instead we simply fall back to looping\n  if (start >= array.length) {\n    return array;\n  }\n  start = (array.length + start) % array.length;\n  if (end >= array.length) {\n    end = array.length;\n  } else {\n    end = (array.length + end) % array.length;\n  }\n  for (let i = start; i < end; ++i) {\n    array[i] = value;\n  }\n  return array;\n}\n\n/**\n * Concat two typed arrays `a` and `b`.\n * Returns a new typed array.\n */\nexport function concat<T extends TypedArray>(a: T, b: T): T {\n  const result = new (a.constructor as any)(a.length + b.length);\n  result.set(a);\n  result.set(b, a.length);\n  return result;\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IAttributeData, IColorRGB, IExtendedAttrs } from 'common/Types';\nimport { Attributes, FgFlags, BgFlags, UnderlineStyle } from 'common/buffer/Constants';\n\nexport class AttributeData implements IAttributeData {\n  public static toColorRGB(value: number): IColorRGB {\n    return [\n      value >>> Attributes.RED_SHIFT & 255,\n      value >>> Attributes.GREEN_SHIFT & 255,\n      value & 255\n    ];\n  }\n\n  public static fromColorRGB(value: IColorRGB): number {\n    return (value[0] & 255) << Attributes.RED_SHIFT | (value[1] & 255) << Attributes.GREEN_SHIFT | value[2] & 255;\n  }\n\n  public clone(): IAttributeData {\n    const newObj = new AttributeData();\n    newObj.fg = this.fg;\n    newObj.bg = this.bg;\n    newObj.extended = this.extended.clone();\n    return newObj;\n  }\n\n  // data\n  public fg = 0;\n  public bg = 0;\n  public extended = new ExtendedAttrs();\n\n  // flags\n  public isInverse(): number   { return this.fg & FgFlags.INVERSE; }\n  public isBold(): number      { return this.fg & FgFlags.BOLD; }\n  public isUnderline(): number { return this.fg & FgFlags.UNDERLINE; }\n  public isBlink(): number     { return this.fg & FgFlags.BLINK; }\n  public isInvisible(): number { return this.fg & FgFlags.INVISIBLE; }\n  public isItalic(): number    { return this.bg & BgFlags.ITALIC; }\n  public isDim(): number       { return this.bg & BgFlags.DIM; }\n\n  // color modes\n  public getFgColorMode(): number { return this.fg & Attributes.CM_MASK; }\n  public getBgColorMode(): number { return this.bg & Attributes.CM_MASK; }\n  public isFgRGB(): boolean       { return (this.fg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isBgRGB(): boolean       { return (this.bg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isFgPalette(): boolean   { return (this.fg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.fg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isBgPalette(): boolean   { return (this.bg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.bg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isFgDefault(): boolean   { return (this.fg & Attributes.CM_MASK) === 0; }\n  public isBgDefault(): boolean   { return (this.bg & Attributes.CM_MASK) === 0; }\n  public isAttributeDefault(): boolean { return this.fg === 0 && this.bg === 0; }\n\n  // colors\n  public getFgColor(): number {\n    switch (this.fg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.fg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.fg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n  public getBgColor(): number {\n    switch (this.bg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.bg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.bg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n\n  // extended attrs\n  public hasExtendedAttrs(): number {\n    return this.bg & BgFlags.HAS_EXTENDED;\n  }\n  public updateExtended(): void {\n    if (this.extended.isEmpty()) {\n      this.bg &= ~BgFlags.HAS_EXTENDED;\n    } else {\n      this.bg |= BgFlags.HAS_EXTENDED;\n    }\n  }\n  public getUnderlineColor(): number {\n    if ((this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor) {\n      switch (this.extended.underlineColor & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:  return this.extended.underlineColor & Attributes.PCOLOR_MASK;\n        case Attributes.CM_RGB:   return this.extended.underlineColor & Attributes.RGB_MASK;\n        default:                  return this.getFgColor();\n      }\n    }\n    return this.getFgColor();\n  }\n  public getUnderlineColorMode(): number {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? this.extended.underlineColor & Attributes.CM_MASK\n      : this.getFgColorMode();\n  }\n  public isUnderlineColorRGB(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_RGB\n      : this.isFgRGB();\n  }\n  public isUnderlineColorPalette(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P16\n          || (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P256\n      : this.isFgPalette();\n  }\n  public isUnderlineColorDefault(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === 0\n      : this.isFgDefault();\n  }\n  public getUnderlineStyle(): UnderlineStyle {\n    return this.fg & FgFlags.UNDERLINE\n      ? (this.bg & BgFlags.HAS_EXTENDED ? this.extended.underlineStyle : UnderlineStyle.SINGLE)\n      : UnderlineStyle.NONE;\n  }\n}\n\n\n/**\n * Extended attributes for a cell.\n * Holds information about different underline styles and color.\n */\nexport class ExtendedAttrs implements IExtendedAttrs {\n  constructor(\n    // underline style, NONE is empty\n    public underlineStyle: UnderlineStyle = UnderlineStyle.NONE,\n    // underline color, -1 is empty (same as FG)\n    public underlineColor: number = -1\n  ) {}\n\n  public clone(): IExtendedAttrs {\n    return new ExtendedAttrs(this.underlineStyle, this.underlineColor);\n  }\n\n  /**\n   * Convenient method to indicate whether the object holds no additional information,\n   * that needs to be persistant in the buffer.\n   */\n  public isEmpty(): boolean {\n    return this.underlineStyle === UnderlineStyle.NONE;\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderLayer } from './Types';\nimport { acquireCharAtlas } from '../atlas/CharAtlasCache';\nimport { Terminal } from 'xterm';\nimport { IColorSet } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { WebglCharAtlas } from 'atlas/WebglCharAtlas';\nimport { throwIfFalsy } from '../WebglUtils';\n\nexport abstract class BaseRenderLayer implements IRenderLayer {\n  private _canvas: HTMLCanvasElement;\n  protected _ctx!: CanvasRenderingContext2D;\n  private _scaledCharWidth: number = 0;\n  private _scaledCharHeight: number = 0;\n  private _scaledCellWidth: number = 0;\n  private _scaledCellHeight: number = 0;\n  private _scaledCharLeft: number = 0;\n  private _scaledCharTop: number = 0;\n\n  protected _charAtlas: WebglCharAtlas | undefined;\n\n  constructor(\n    private _container: HTMLElement,\n    id: string,\n    zIndex: number,\n    private _alpha: boolean,\n    protected _colors: IColorSet\n  ) {\n    this._canvas = document.createElement('canvas');\n    this._canvas.classList.add(`xterm-${id}-layer`);\n    this._canvas.style.zIndex = zIndex.toString();\n    this._initCanvas();\n    this._container.appendChild(this._canvas);\n  }\n\n  public dispose(): void {\n    this._container.removeChild(this._canvas);\n    if (this._charAtlas) {\n      this._charAtlas.dispose();\n    }\n  }\n\n  private _initCanvas(): void {\n    this._ctx = throwIfFalsy(this._canvas.getContext('2d', {alpha: this._alpha}));\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n  }\n\n  public onOptionsChanged(terminal: Terminal): void {}\n  public onBlur(terminal: Terminal): void {}\n  public onFocus(terminal: Terminal): void {}\n  public onCursorMove(terminal: Terminal): void {}\n  public onGridChanged(terminal: Terminal, startRow: number, endRow: number): void {}\n  public onSelectionChanged(terminal: Terminal, start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {}\n\n  public setColors(terminal: Terminal, colorSet: IColorSet): void {\n    this._refreshCharAtlas(terminal, colorSet);\n  }\n\n  protected _setTransparency(terminal: Terminal, alpha: boolean): void {\n    // Do nothing when alpha doesn't change\n    if (alpha === this._alpha) {\n      return;\n    }\n\n    // Create new canvas and replace old one\n    const oldCanvas = this._canvas;\n    this._alpha = alpha;\n    // Cloning preserves properties\n    this._canvas = this._canvas.cloneNode() as HTMLCanvasElement;\n    this._initCanvas();\n    this._container.replaceChild(this._canvas, oldCanvas);\n\n    // Regenerate char atlas and force a full redraw\n    this._refreshCharAtlas(terminal, this._colors);\n    this.onGridChanged(terminal, 0, terminal.rows - 1);\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   * @param terminal The terminal.\n   * @param colorSet The color set to use for the char atlas.\n   */\n  private _refreshCharAtlas(terminal: Terminal, colorSet: IColorSet): void {\n    if (this._scaledCharWidth <= 0 && this._scaledCharHeight <= 0) {\n      return;\n    }\n    this._charAtlas = acquireCharAtlas(terminal, colorSet, this._scaledCharWidth, this._scaledCharHeight);\n    this._charAtlas.warmUp();\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    this._scaledCellWidth = dim.scaledCellWidth;\n    this._scaledCellHeight = dim.scaledCellHeight;\n    this._scaledCharWidth = dim.scaledCharWidth;\n    this._scaledCharHeight = dim.scaledCharHeight;\n    this._scaledCharLeft = dim.scaledCharLeft;\n    this._scaledCharTop = dim.scaledCharTop;\n    this._canvas.width = dim.scaledCanvasWidth;\n    this._canvas.height = dim.scaledCanvasHeight;\n    this._canvas.style.width = `${dim.canvasWidth}px`;\n    this._canvas.style.height = `${dim.canvasHeight}px`;\n\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n\n    this._refreshCharAtlas(terminal, this._colors);\n  }\n\n  public abstract reset(terminal: Terminal): void;\n\n  /**\n   * Fills 1+ cells completely. This uses the existing fillStyle on the context.\n   * @param x The column to start at.\n   * @param y The row to start at\n   * @param width The number of columns to fill.\n   * @param height The number of rows to fill.\n   */\n  protected _fillCells(x: number, y: number, width: number, height: number): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      y * this._scaledCellHeight,\n      width * this._scaledCellWidth,\n      height * this._scaledCellHeight);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the bottom of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillBottomLineAtCells(x: number, y: number, width: number = 1): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      (y + 1) * this._scaledCellHeight - window.devicePixelRatio - 1 /* Ensure it's drawn within the cell */,\n      width * this._scaledCellWidth,\n      window.devicePixelRatio);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the left of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillLeftLineAtCell(x: number, y: number, width: number): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      y * this._scaledCellHeight,\n      window.devicePixelRatio * width,\n      this._scaledCellHeight);\n  }\n\n  /**\n   * Strokes a 1px rectangle (2px on HDPI) around a cell. This uses the existing\n   * strokeStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _strokeRectAtCell(x: number, y: number, width: number, height: number): void {\n    this._ctx.lineWidth = window.devicePixelRatio;\n    this._ctx.strokeRect(\n      x * this._scaledCellWidth + window.devicePixelRatio / 2,\n      y * this._scaledCellHeight + (window.devicePixelRatio / 2),\n      width * this._scaledCellWidth - window.devicePixelRatio,\n      (height * this._scaledCellHeight) - window.devicePixelRatio);\n  }\n\n  /**\n   * Clears the entire canvas.\n   */\n  protected _clearAll(): void {\n    if (this._alpha) {\n      this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    } else {\n      this._ctx.fillStyle = this._colors.background.css;\n      this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\n    }\n  }\n\n  /**\n   * Clears 1+ cells completely.\n   * @param x The column to start at.\n   * @param y The row to start at.\n   * @param width The number of columns to clear.\n   * @param height The number of rows to clear.\n   */\n  protected _clearCells(x: number, y: number, width: number, height: number): void {\n    if (this._alpha) {\n      this._ctx.clearRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        width * this._scaledCellWidth,\n        height * this._scaledCellHeight);\n    } else {\n      this._ctx.fillStyle = this._colors.background.css;\n      this._ctx.fillRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        width * this._scaledCellWidth,\n        height * this._scaledCellHeight);\n    }\n  }\n\n  /**\n   * Draws a truecolor character at the cell. The character will be clipped to\n   * ensure that it fits with the cell, including the cell to the right if it's\n   * a wide character. This uses the existing fillStyle on the context.\n   * @param terminal The terminal.\n   * @param cell The cell data for the character to draw.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   * @param color The color of the character.\n   */\n  protected _fillCharTrueColor(terminal: Terminal, cell: CellData, x: number, y: number): void {\n    this._ctx.font = this._getFont(terminal, false, false);\n    this._ctx.textBaseline = 'middle';\n    this._clipRow(terminal, y);\n    this._ctx.fillText(\n      cell.getChars(),\n      x * this._scaledCellWidth + this._scaledCharLeft,\n      y * this._scaledCellHeight + this._scaledCharTop + this._scaledCharHeight / 2);\n  }\n\n  /**\n   * Clips a row to ensure no pixels will be drawn outside the cells in the row.\n   * @param terminal The terminal.\n   * @param y The row to clip.\n   */\n  private _clipRow(terminal: Terminal, y: number): void {\n    this._ctx.beginPath();\n    this._ctx.rect(\n      0,\n      y * this._scaledCellHeight,\n      terminal.cols * this._scaledCellWidth,\n      this._scaledCellHeight);\n    this._ctx.clip();\n  }\n\n  /**\n   * Gets the current font.\n   * @param terminal The terminal.\n   * @param isBold If we should use the bold fontWeight.\n   */\n  protected _getFont(terminal: Terminal, isBold: boolean, isItalic: boolean): string {\n    const fontWeight = isBold ? terminal.getOption('fontWeightBold') : terminal.getOption('fontWeight');\n    const fontStyle = isItalic ? 'italic' : '';\n\n    return `${fontStyle} ${fontWeight} ${terminal.getOption('fontSize') * window.devicePixelRatio}px ${terminal.getOption('fontFamily')}`;\n  }\n}\n\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { generateConfig, configEquals } from './CharAtlasUtils';\nimport { WebglCharAtlas } from './WebglCharAtlas';\nimport { ICharAtlasConfig } from './Types';\nimport { Terminal } from 'xterm';\nimport { IColorSet } from 'browser/Types';\n\ninterface ICharAtlasCacheEntry {\n  atlas: WebglCharAtlas;\n  config: ICharAtlasConfig;\n  // N.B. This implementation potentially holds onto copies of the terminal forever, so\n  // this may cause memory leaks.\n  ownedBy: Terminal[];\n}\n\nconst charAtlasCache: ICharAtlasCacheEntry[] = [];\n\n/**\n * Acquires a char atlas, either generating a new one or returning an existing\n * one that is in use by another terminal.\n * @param terminal The terminal.\n * @param colors The colors to use.\n */\nexport function acquireCharAtlas(\n  terminal: Terminal,\n  colors: IColorSet,\n  scaledCharWidth: number,\n  scaledCharHeight: number\n): WebglCharAtlas {\n  const newConfig = generateConfig(scaledCharWidth, scaledCharHeight, terminal, colors);\n\n  // Check to see if the terminal already owns this config\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    const ownedByIndex = entry.ownedBy.indexOf(terminal);\n    if (ownedByIndex >= 0) {\n      if (configEquals(entry.config, newConfig)) {\n        return entry.atlas;\n      }\n      // The configs differ, release the terminal from the entry\n      if (entry.ownedBy.length === 1) {\n        entry.atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        entry.ownedBy.splice(ownedByIndex, 1);\n      }\n      break;\n    }\n  }\n\n  // Try match a char atlas from the cache\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    if (configEquals(entry.config, newConfig)) {\n      // Add the terminal to the cache entry and return\n      entry.ownedBy.push(terminal);\n      return entry.atlas;\n    }\n  }\n\n  const newEntry: ICharAtlasCacheEntry = {\n    atlas: new WebglCharAtlas(document, newConfig),\n    config: newConfig,\n    ownedBy: [terminal]\n  };\n  charAtlasCache.push(newEntry);\n  return newEntry.atlas;\n}\n\n/**\n * Removes a terminal reference from the cache, allowing its memory to be freed.\n * @param terminal The terminal to remove.\n */\nexport function removeTerminalFromCache(terminal: Terminal): void {\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const index = charAtlasCache[i].ownedBy.indexOf(terminal);\n    if (index !== -1) {\n      if (charAtlasCache[i].ownedBy.length === 1) {\n        // Remove the cache entry if it's the only terminal\n        charAtlasCache[i].atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        // Remove the reference from the cache entry\n        charAtlasCache[i].ownedBy.splice(index, 1);\n      }\n      break;\n    }\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharAtlasConfig } from './Types';\nimport { Attributes } from 'common/buffer/Constants';\nimport { Terminal, FontWeight } from 'xterm';\nimport { IColorSet, IColor } from 'browser/Types';\n\nconst NULL_COLOR: IColor = {\n  css: '',\n  rgba: 0\n};\n\nexport function generateConfig(scaledCharWidth: number, scaledCharHeight: number, terminal: Terminal, colors: IColorSet): ICharAtlasConfig {\n  // null out some fields that don't matter\n  const clonedColors: IColorSet = {\n    foreground: colors.foreground,\n    background: colors.background,\n    cursor: NULL_COLOR,\n    cursorAccent: NULL_COLOR,\n    selection: NULL_COLOR,\n    selectionOpaque: NULL_COLOR,\n    // For the static char atlas, we only use the first 16 colors, but we need all 256 for the\n    // dynamic character atlas.\n    ansi: colors.ansi.slice(),\n    contrastCache: colors.contrastCache\n  };\n  return {\n    devicePixelRatio: window.devicePixelRatio,\n    scaledCharWidth,\n    scaledCharHeight,\n    fontFamily: terminal.getOption('fontFamily'),\n    fontSize: terminal.getOption('fontSize'),\n    fontWeight: terminal.getOption('fontWeight') as FontWeight,\n    fontWeightBold: terminal.getOption('fontWeightBold') as FontWeight,\n    allowTransparency: terminal.getOption('allowTransparency'),\n    drawBoldTextInBrightColors: terminal.getOption('drawBoldTextInBrightColors'),\n    minimumContrastRatio: terminal.getOption('minimumContrastRatio'),\n    colors: clonedColors\n  };\n}\n\nexport function configEquals(a: ICharAtlasConfig, b: ICharAtlasConfig): boolean {\n  for (let i = 0; i < a.colors.ansi.length; i++) {\n    if (a.colors.ansi[i].rgba !== b.colors.ansi[i].rgba) {\n      return false;\n    }\n  }\n  return a.devicePixelRatio === b.devicePixelRatio &&\n      a.fontFamily === b.fontFamily &&\n      a.fontSize === b.fontSize &&\n      a.fontWeight === b.fontWeight &&\n      a.fontWeightBold === b.fontWeightBold &&\n      a.allowTransparency === b.allowTransparency &&\n      a.scaledCharWidth === b.scaledCharWidth &&\n      a.scaledCharHeight === b.scaledCharHeight &&\n      a.drawBoldTextInBrightColors === b.drawBoldTextInBrightColors &&\n      a.minimumContrastRatio === b.minimumContrastRatio &&\n      a.colors.foreground === b.colors.foreground &&\n      a.colors.background === b.colors.background;\n}\n\nexport function is256Color(colorCode: number): boolean {\n  return (colorCode & Attributes.CM_MASK) === Attributes.CM_P16 || (colorCode & Attributes.CM_MASK) === Attributes.CM_P256;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const INVERTED_DEFAULT_COLOR = 257;\nexport const DIM_OPACITY = 0.5;\n\nexport const CHAR_ATLAS_CELL_SPACING = 1;\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, ICellData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, Content } from 'common/buffer/Constants';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * CellData - represents a single Cell in the terminal buffer.\n */\nexport class CellData extends AttributeData implements ICellData {\n  /** Helper to create CellData from CharData. */\n  public static fromCharData(value: CharData): CellData {\n    const obj = new CellData();\n    obj.setFromCharData(value);\n    return obj;\n  }\n  /** Primitives from terminal buffer. */\n  public content = 0;\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n  public combinedData = '';\n  /** Whether cell contains a combined string. */\n  public isCombined(): number {\n    return this.content & Content.IS_COMBINED_MASK;\n  }\n  /** Width of the cell. */\n  public getWidth(): number {\n    return this.content >> Content.WIDTH_SHIFT;\n  }\n  /** JS string of the content. */\n  public getChars(): string {\n    if (this.content & Content.IS_COMBINED_MASK) {\n      return this.combinedData;\n    }\n    if (this.content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(this.content & Content.CODEPOINT_MASK);\n    }\n    return '';\n  }\n  /**\n   * Codepoint of cell\n   * Note this returns the UTF32 codepoint of single chars,\n   * if content is a combined string it returns the codepoint\n   * of the last char in string to be in line with code in CharData.\n   * */\n  public getCode(): number {\n    return (this.isCombined())\n      ? this.combinedData.charCodeAt(this.combinedData.length - 1)\n      : this.content & Content.CODEPOINT_MASK;\n  }\n  /** Set data from CharData */\n  public setFromCharData(value: CharData): void {\n    this.fg = value[CHAR_DATA_ATTR_INDEX];\n    this.bg = 0;\n    let combined = false;\n    // surrogates and combined strings need special treatment\n    if (value[CHAR_DATA_CHAR_INDEX].length > 2) {\n      combined = true;\n    }\n    else if (value[CHAR_DATA_CHAR_INDEX].length === 2) {\n      const code = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0);\n      // if the 2-char string is a surrogate create single codepoint\n      // everything else is combined\n      if (0xD800 <= code && code <= 0xDBFF) {\n        const second = value[CHAR_DATA_CHAR_INDEX].charCodeAt(1);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          this.content = ((code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n        }\n        else {\n          combined = true;\n        }\n      }\n      else {\n        combined = true;\n      }\n    }\n    else {\n      this.content = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n    if (combined) {\n      this.combinedData = value[CHAR_DATA_CHAR_INDEX];\n      this.content = Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n  /** Get data as CharData. */\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal, ITerminalAddon } from 'xterm';\nimport { WebglRenderer } from './WebglRenderer';\nimport { IRenderService } from 'browser/services/Services';\nimport { IColorSet } from 'browser/Types';\n\nexport class WebglAddon implements ITerminalAddon {\n  private _terminal?: Terminal;\n  private _renderer?: WebglRenderer;\n\n  constructor(\n    private _preserveDrawingBuffer?: boolean\n  ) {}\n\n  public activate(terminal: Terminal): void {\n    if (!terminal.element) {\n      throw new Error('Cannot activate WebglAddon before Terminal.open');\n    }\n    this._terminal = terminal;\n    const renderService: IRenderService = (<any>terminal)._core._renderService;\n    const colors: IColorSet = (<any>terminal)._core._colorManager.colors;\n    this._renderer = new WebglRenderer(terminal, colors, this._preserveDrawingBuffer);\n    renderService.setRenderer(this._renderer);\n  }\n\n  public dispose(): void {\n    if (!this._terminal) {\n      throw new Error('Cannot dispose WebglAddon because it is activated');\n    }\n    const renderService: IRenderService = (this._terminal as any)._core._renderService;\n    renderService.setRenderer((this._terminal as any)._core._createRenderer());\n    renderService.onResize(this._terminal.cols, this._terminal.rows);\n    this._renderer = undefined;\n  }\n\n  public get textureAtlas(): HTMLCanvasElement | undefined {\n    return this._renderer?.textureAtlas;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { GlyphRenderer } from './GlyphRenderer';\nimport { LinkRenderLayer } from './renderLayer/LinkRenderLayer';\nimport { CursorRenderLayer } from './renderLayer/CursorRenderLayer';\nimport { acquireCharAtlas } from './atlas/CharAtlasCache';\nimport { WebglCharAtlas } from './atlas/WebglCharAtlas';\nimport { RectangleRenderer } from './RectangleRenderer';\nimport { IWebGL2RenderingContext } from './Types';\nimport { RenderModel, COMBINED_CHAR_BIT_MASK, RENDER_MODEL_BG_OFFSET, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_INDICIES_PER_CELL } from './RenderModel';\nimport { Disposable } from 'common/Lifecycle';\nimport { NULL_CELL_CODE } from 'common/buffer/Constants';\nimport { Terminal, IEvent } from 'xterm';\nimport { IRenderLayer } from './renderLayer/Types';\nimport { IRenderDimensions, IRenderer, IRequestRedrawEvent } from 'browser/renderer/Types';\nimport { ITerminal, IColorSet } from 'browser/Types';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { CellData } from 'common/buffer/CellData';\n\nexport class WebglRenderer extends Disposable implements IRenderer {\n  private _renderLayers: IRenderLayer[];\n  private _charAtlas: WebglCharAtlas | undefined;\n  private _devicePixelRatio: number;\n\n  private _model: RenderModel = new RenderModel();\n  private _workCell: CellData = new CellData();\n\n  private _canvas: HTMLCanvasElement;\n  private _gl: IWebGL2RenderingContext;\n  private _rectangleRenderer: RectangleRenderer;\n  private _glyphRenderer: GlyphRenderer;\n\n  public dimensions: IRenderDimensions;\n\n  private _core: ITerminal;\n  private _isAttached: boolean;\n\n  private _onRequestRedraw = new EventEmitter<IRequestRedrawEvent>();\n  public get onRequestRedraw(): IEvent<IRequestRedrawEvent> { return this._onRequestRedraw.event; }\n\n  constructor(\n    private _terminal: Terminal,\n    private _colors: IColorSet,\n    preserveDrawingBuffer?: boolean\n  ) {\n    super();\n\n    this._core = (this._terminal as any)._core;\n\n    this._renderLayers = [\n      new LinkRenderLayer(this._core.screenElement!, 2, this._colors, this._core),\n      new CursorRenderLayer(this._core.screenElement!, 3, this._colors, this._onRequestRedraw)\n    ];\n    this.dimensions = {\n      scaledCharWidth: 0,\n      scaledCharHeight: 0,\n      scaledCellWidth: 0,\n      scaledCellHeight: 0,\n      scaledCharLeft: 0,\n      scaledCharTop: 0,\n      scaledCanvasWidth: 0,\n      scaledCanvasHeight: 0,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      actualCellWidth: 0,\n      actualCellHeight: 0\n    };\n    this._devicePixelRatio = window.devicePixelRatio;\n    this._updateDimensions();\n\n    this._canvas = document.createElement('canvas');\n\n    const contextAttributes = {\n      antialias: false,\n      depth: false,\n      preserveDrawingBuffer\n    };\n    this._gl = this._canvas.getContext('webgl2', contextAttributes) as IWebGL2RenderingContext;\n    if (!this._gl) {\n      throw new Error('WebGL2 not supported ' + this._gl);\n    }\n    this._core.screenElement!.appendChild(this._canvas);\n\n    this._rectangleRenderer = new RectangleRenderer(this._terminal, this._colors, this._gl, this.dimensions);\n    this._glyphRenderer = new GlyphRenderer(this._terminal, this._colors, this._gl, this.dimensions);\n\n    // Update dimensions and acquire char atlas\n    this.onCharSizeChanged();\n\n    this._isAttached = document.body.contains(this._core.screenElement!);\n  }\n\n  public dispose(): void {\n    this._renderLayers.forEach(l => l.dispose());\n    this._core.screenElement!.removeChild(this._canvas);\n    super.dispose();\n  }\n\n  public get textureAtlas(): HTMLCanvasElement | undefined {\n    return this._charAtlas?.cacheCanvas;\n  }\n\n  public setColors(colors: IColorSet): void {\n    this._colors = colors;\n    // Clear layers and force a full render\n    this._renderLayers.forEach(l => {\n      l.setColors(this._terminal, this._colors);\n      l.reset(this._terminal);\n    });\n\n    this._rectangleRenderer.setColors();\n    this._glyphRenderer.setColors();\n\n    this._refreshCharAtlas();\n\n    this._rectangleRenderer.updateSelection(this._model.selection);\n    this._glyphRenderer.updateSelection(this._model);\n\n    // Force a full refresh\n    this._model.clear();\n  }\n\n  public onDevicePixelRatioChange(): void {\n    // If the device pixel ratio changed, the char atlas needs to be regenerated\n    // and the terminal needs to refreshed\n    if (this._devicePixelRatio !== window.devicePixelRatio) {\n      this._devicePixelRatio = window.devicePixelRatio;\n      this.onResize(this._terminal.cols, this._terminal.rows);\n    }\n  }\n\n  public onResize(cols: number, rows: number): void {\n    // Update character and canvas dimensions\n    this._updateDimensions();\n\n    this._model.resize(this._terminal.cols, this._terminal.rows);\n    this._rectangleRenderer.onResize();\n\n    // Resize all render layers\n    this._renderLayers.forEach(l => l.resize(this._terminal, this.dimensions));\n\n    // Resize the canvas\n    this._canvas.width = this.dimensions.scaledCanvasWidth;\n    this._canvas.height = this.dimensions.scaledCanvasHeight;\n    this._canvas.style.width = `${this.dimensions.canvasWidth}px`;\n    this._canvas.style.height = `${this.dimensions.canvasHeight}px`;\n\n    // Resize the screen\n    this._core.screenElement!.style.width = `${this.dimensions.canvasWidth}px`;\n    this._core.screenElement!.style.height = `${this.dimensions.canvasHeight}px`;\n    this._glyphRenderer.setDimensions(this.dimensions);\n    this._glyphRenderer.onResize();\n\n    this._refreshCharAtlas();\n\n    // Force a full refresh\n    this._model.clear();\n  }\n\n  public onCharSizeChanged(): void {\n    this.onResize(this._terminal.cols, this._terminal.rows);\n  }\n\n  public onBlur(): void {\n    this._renderLayers.forEach(l => l.onBlur(this._terminal));\n  }\n\n  public onFocus(): void {\n    this._renderLayers.forEach(l => l.onFocus(this._terminal));\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    this._renderLayers.forEach(l => l.onSelectionChanged(this._terminal, start, end, columnSelectMode));\n\n    this._updateSelectionModel(start, end, columnSelectMode);\n\n    this._rectangleRenderer.updateSelection(this._model.selection);\n    this._glyphRenderer.updateSelection(this._model);\n\n    this._onRequestRedraw.fire({ start: 0, end: this._terminal.rows - 1 });\n  }\n\n  public onCursorMove(): void {\n    this._renderLayers.forEach(l => l.onCursorMove(this._terminal));\n  }\n\n  public onOptionsChanged(): void {\n    this._renderLayers.forEach(l => l.onOptionsChanged(this._terminal));\n    this._updateDimensions();\n    this._refreshCharAtlas();\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   * @param terminal The terminal.\n   * @param colorSet The color set to use for the char atlas.\n   */\n  private _refreshCharAtlas(): void {\n    if (this.dimensions.scaledCharWidth <= 0 && this.dimensions.scaledCharHeight <= 0) {\n      // Mark as not attached so char atlas gets refreshed on next render\n      this._isAttached = false;\n      return;\n    }\n\n    const atlas = acquireCharAtlas(this._terminal, this._colors, this.dimensions.scaledCharWidth, this.dimensions.scaledCharHeight);\n    if (!('getRasterizedGlyph' in atlas)) {\n      throw new Error('The webgl renderer only works with the webgl char atlas');\n    }\n    this._charAtlas = atlas as WebglCharAtlas;\n    this._charAtlas.warmUp();\n    this._glyphRenderer.setAtlas(this._charAtlas);\n  }\n\n  public clear(): void {\n    this._renderLayers.forEach(l => l.reset(this._terminal));\n  }\n\n  public registerCharacterJoiner(handler: (text: string) => [number, number][]): number {\n    return -1;\n  }\n\n  public deregisterCharacterJoiner(joinerId: number): boolean {\n    return false;\n  }\n\n  public renderRows(start: number, end: number): void {\n    if (!this._isAttached) {\n      if (document.body.contains(this._core.screenElement!) && (this._core as any)._charSizeService.width && (this._core as any)._charSizeService.height) {\n        this._updateDimensions();\n        this._refreshCharAtlas();\n        this._isAttached = true;\n      } else {\n        return;\n      }\n    }\n\n    // Update render layers\n    this._renderLayers.forEach(l => l.onGridChanged(this._terminal, start, end));\n\n    // Tell renderer the frame is beginning\n    if (this._glyphRenderer.beginFrame()) {\n      this._model.clear();\n    }\n\n    // Update model to reflect what's drawn\n    this._updateModel(start, end);\n\n    // Render\n    this._rectangleRenderer.render();\n    this._glyphRenderer.render(this._model, this._model.selection.hasSelection);\n  }\n\n  private _updateModel(start: number, end: number): void {\n    const terminal = this._core;\n\n    for (let y = start; y <= end; y++) {\n      const row = y + terminal.buffer.ydisp;\n      const line = terminal.buffer.lines.get(row)!;\n      this._model.lineLengths[y] = 0;\n      for (let x = 0; x < terminal.cols; x++) {\n        line.loadCell(x, this._workCell);\n\n        const chars = this._workCell.getChars();\n        let code = this._workCell.getCode();\n        const i = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n\n        if (code !== NULL_CELL_CODE) {\n          this._model.lineLengths[y] = x + 1;\n        }\n\n        // Nothing has changed, no updates needed\n        if (this._model.cells[i] === code &&\n            this._model.cells[i + RENDER_MODEL_BG_OFFSET] === this._workCell.bg &&\n            this._model.cells[i + RENDER_MODEL_FG_OFFSET] === this._workCell.fg) {\n          continue;\n        }\n\n        // Flag combined chars with a bit mask so they're easily identifiable\n        if (chars.length > 1) {\n          code = code | COMBINED_CHAR_BIT_MASK;\n        }\n\n        // Cache the results in the model\n        this._model.cells[i] = code;\n        this._model.cells[i + RENDER_MODEL_BG_OFFSET] = this._workCell.bg;\n        this._model.cells[i + RENDER_MODEL_FG_OFFSET] = this._workCell.fg;\n\n        this._glyphRenderer.updateCell(x, y, code, this._workCell.bg, this._workCell.fg, chars);\n      }\n    }\n    this._rectangleRenderer.updateBackgrounds(this._model);\n  }\n\n  private _updateSelectionModel(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    const terminal = this._terminal;\n\n    // Selection does not exist\n    if (!start || !end || (start[0] === end[0] && start[1] === end[1])) {\n      this._model.clearSelection();\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportStartRow = start[1] - terminal.buffer.active.viewportY;\n    const viewportEndRow = end[1] - terminal.buffer.active.viewportY;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, terminal.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= terminal.rows || viewportCappedEndRow < 0) {\n      this._model.clearSelection();\n      return;\n    }\n\n    this._model.selection.hasSelection = true;\n    this._model.selection.columnSelectMode = columnSelectMode;\n    this._model.selection.viewportStartRow = viewportStartRow;\n    this._model.selection.viewportEndRow = viewportEndRow;\n    this._model.selection.viewportCappedStartRow = viewportCappedStartRow;\n    this._model.selection.viewportCappedEndRow = viewportCappedEndRow;\n    this._model.selection.startCol = start[0];\n    this._model.selection.endCol = end[0];\n  }\n\n  /**\n   * Recalculates the character and canvas dimensions.\n   */\n  private _updateDimensions(): void {\n    // TODO: Acquire CharSizeService properly\n\n    // Perform a new measure if the CharMeasure dimensions are not yet available\n    if (!(this._core as any)._charSizeService.width || !(this._core as any)._charSizeService.height) {\n      return;\n    }\n\n    // Calculate the scaled character width. Width is floored as it must be\n    // drawn to an integer grid in order for the CharAtlas \"stamps\" to not be\n    // blurry. When text is drawn to the grid not using the CharAtlas, it is\n    // clipped to ensure there is no overlap with the next cell.\n\n    // NOTE: ceil fixes sometime, floor does others :s\n\n    this.dimensions.scaledCharWidth = Math.floor((this._core as any)._charSizeService.width * this._devicePixelRatio);\n\n    // Calculate the scaled character height. Height is ceiled in case\n    // devicePixelRatio is a floating point number in order to ensure there is\n    // enough space to draw the character to the cell.\n    this.dimensions.scaledCharHeight = Math.ceil((this._core as any)._charSizeService.height * this._devicePixelRatio);\n\n    // Calculate the scaled cell height, if lineHeight is not 1 then the value\n    // will be floored because since lineHeight can never be lower then 1, there\n    // is a guarentee that the scaled line height will always be larger than\n    // scaled char height.\n    this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._terminal.getOption('lineHeight'));\n\n    // Calculate the y coordinate within a cell that text should draw from in\n    // order to draw in the center of a cell.\n    this.dimensions.scaledCharTop = this._terminal.getOption('lineHeight') === 1 ? 0 : Math.round((this.dimensions.scaledCellHeight - this.dimensions.scaledCharHeight) / 2);\n\n    // Calculate the scaled cell width, taking the letterSpacing into account.\n    this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._terminal.getOption('letterSpacing'));\n\n    // Calculate the x coordinate with a cell that text should draw from in\n    // order to draw in the center of a cell.\n    this.dimensions.scaledCharLeft = Math.floor(this._terminal.getOption('letterSpacing') / 2);\n\n    // Recalculate the canvas dimensions; scaled* define the actual number of\n    // pixel in the canvas\n    this.dimensions.scaledCanvasHeight = this._terminal.rows * this.dimensions.scaledCellHeight;\n    this.dimensions.scaledCanvasWidth = this._terminal.cols * this.dimensions.scaledCellWidth;\n\n    // The the size of the canvas on the page. It's very important that this\n    // rounds to nearest integer and not ceils as browsers often set\n    // window.devicePixelRatio as something like 1.100000023841858, when it's\n    // actually 1.1. Ceiling causes blurriness as the backing canvas image is 1\n    // pixel too large for the canvas element size.\n    this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / this._devicePixelRatio);\n    this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / this._devicePixelRatio);\n\n    // this.dimensions.scaledCanvasHeight = this.dimensions.canvasHeight * devicePixelRatio;\n    // this.dimensions.scaledCanvasWidth = this.dimensions.canvasWidth * devicePixelRatio;\n\n    // Get the _actual_ dimensions of an individual cell. This needs to be\n    // derived from the canvasWidth/Height calculated above which takes into\n    // account window.devicePixelRatio. CharMeasure.width/height by itself is\n    // insufficient when the page is not at 100% zoom level as CharMeasure is\n    // measured in CSS pixels, but the actual char size on the canvas can\n    // differ.\n    // this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._terminal.rows;\n    // this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._terminal.cols;\n\n    // This fixes 110% and 125%, not 150% or 175% though\n    this.dimensions.actualCellHeight = this.dimensions.scaledCellHeight / this._devicePixelRatio;\n    this.dimensions.actualCellWidth = this.dimensions.scaledCellWidth / this._devicePixelRatio;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { createProgram, PROJECTION_MATRIX, throwIfFalsy } from './WebglUtils';\nimport { WebglCharAtlas } from './atlas/WebglCharAtlas';\nimport { IWebGL2RenderingContext, IWebGLVertexArrayObject, IRenderModel, IRasterizedGlyph } from './Types';\nimport { COMBINED_CHAR_BIT_MASK, RENDER_MODEL_INDICIES_PER_CELL, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_BG_OFFSET } from './RenderModel';\nimport { fill } from 'common/TypedArrayUtils';\nimport { slice } from './TypedArray';\nimport { NULL_CELL_CODE, WHITESPACE_CELL_CODE, Attributes, FgFlags } from 'common/buffer/Constants';\nimport { Terminal, IBufferLine } from 'xterm';\nimport { IColorSet, IColor } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\n\ninterface IVertices {\n  attributes: Float32Array;\n  /**\n   * These buffers are the ones used to bind to WebGL, the reason there are\n   * multiple is to allow double buffering to work as you cannot modify the\n   * buffer while it's being used by the GPU. Having multiple lets us start\n   * working on the next frame.\n   */\n  attributesBuffers: Float32Array[];\n  selectionAttributes: Float32Array;\n  count: number;\n}\n\nconst enum VertexAttribLocations {\n  UNIT_QUAD = 0,\n  CELL_POSITION = 1,\n  OFFSET = 2,\n  SIZE = 3,\n  TEXCOORD = 4,\n  TEXSIZE = 5\n}\n\nconst vertexShaderSource = `#version 300 es\nlayout (location = ${VertexAttribLocations.UNIT_QUAD}) in vec2 a_unitquad;\nlayout (location = ${VertexAttribLocations.CELL_POSITION}) in vec2 a_cellpos;\nlayout (location = ${VertexAttribLocations.OFFSET}) in vec2 a_offset;\nlayout (location = ${VertexAttribLocations.SIZE}) in vec2 a_size;\nlayout (location = ${VertexAttribLocations.TEXCOORD}) in vec2 a_texcoord;\nlayout (location = ${VertexAttribLocations.TEXSIZE}) in vec2 a_texsize;\n\nuniform mat4 u_projection;\nuniform vec2 u_resolution;\n\nout vec2 v_texcoord;\n\nvoid main() {\n  vec2 zeroToOne = (a_offset / u_resolution) + a_cellpos + (a_unitquad * a_size);\n  gl_Position = u_projection * vec4(zeroToOne, 0.0, 1.0);\n  v_texcoord = a_texcoord + a_unitquad * a_texsize;\n}`;\n\nconst fragmentShaderSource = `#version 300 es\nprecision lowp float;\n\nin vec2 v_texcoord;\n\nuniform sampler2D u_texture;\n\nout vec4 outColor;\n\nvoid main() {\n  outColor = texture(u_texture, v_texcoord);\n}`;\n\nconst INDICES_PER_CELL = 10;\nconst BYTES_PER_CELL = INDICES_PER_CELL * Float32Array.BYTES_PER_ELEMENT;\nconst CELL_POSITION_INDICES = 2;\n\nexport class GlyphRenderer {\n  private _atlas: WebglCharAtlas | undefined;\n\n  private _program: WebGLProgram;\n  private _vertexArrayObject: IWebGLVertexArrayObject;\n  private _projectionLocation: WebGLUniformLocation;\n  private _resolutionLocation: WebGLUniformLocation;\n  private _textureLocation: WebGLUniformLocation;\n  private _atlasTexture: WebGLTexture;\n  private _attributesBuffer: WebGLBuffer;\n  private _activeBuffer: number = 0;\n\n  private _vertices: IVertices = {\n    count: 0,\n    attributes: new Float32Array(0),\n    attributesBuffers: [\n      new Float32Array(0),\n      new Float32Array(0)\n    ],\n    selectionAttributes: new Float32Array(0)\n  };\n\n  constructor(\n    private _terminal: Terminal,\n    private _colors: IColorSet,\n    private _gl: IWebGL2RenderingContext,\n    private _dimensions: IRenderDimensions\n  ) {\n    const gl = this._gl;\n    const program = throwIfFalsy(createProgram(gl, vertexShaderSource, fragmentShaderSource));\n    this._program = program;\n\n    // Uniform locations\n    this._projectionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_projection'));\n    this._resolutionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_resolution'));\n    this._textureLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_texture'));\n\n    // Create and set the vertex array object\n    this._vertexArrayObject = gl.createVertexArray();\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Setup a_unitquad, this defines the 4 vertices of a rectangle\n    const unitQuadVertices = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n    const unitQuadVerticesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, unitQuadVerticesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, unitQuadVertices, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(VertexAttribLocations.UNIT_QUAD);\n    gl.vertexAttribPointer(VertexAttribLocations.UNIT_QUAD, 2, this._gl.FLOAT, false, 0, 0);\n\n    // Setup the unit quad element array buffer, this points to indices in\n    // unitQuadVertuces to allow is to draw 2 triangles from the vertices\n    const unitQuadElementIndices = new Uint8Array([0, 1, 3, 0, 2, 3]);\n    const elementIndicesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementIndicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, unitQuadElementIndices, gl.STATIC_DRAW);\n\n    // Setup attributes\n    this._attributesBuffer = throwIfFalsy(gl.createBuffer());\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.enableVertexAttribArray(VertexAttribLocations.OFFSET);\n    gl.vertexAttribPointer(VertexAttribLocations.OFFSET, 2, gl.FLOAT, false, BYTES_PER_CELL, 0);\n    gl.vertexAttribDivisor(VertexAttribLocations.OFFSET, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.SIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.SIZE, 2, gl.FLOAT, false, BYTES_PER_CELL, 2 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.SIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.TEXCOORD);\n    gl.vertexAttribPointer(VertexAttribLocations.TEXCOORD, 2, gl.FLOAT, false, BYTES_PER_CELL, 4 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.TEXCOORD, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.TEXSIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.TEXSIZE, 2, gl.FLOAT, false, BYTES_PER_CELL, 6 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.TEXSIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.CELL_POSITION);\n    gl.vertexAttribPointer(VertexAttribLocations.CELL_POSITION, 2, gl.FLOAT, false, BYTES_PER_CELL, 8 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.CELL_POSITION, 1);\n\n    // Setup empty texture atlas\n    this._atlasTexture = throwIfFalsy(gl.createTexture());\n    gl.bindTexture(gl.TEXTURE_2D, this._atlasTexture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 255, 255]));\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    // Allow drawing of transparent texture\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    // Set viewport\n    this.onResize();\n  }\n\n  public beginFrame(): boolean {\n    return this._atlas ? this._atlas.beginFrame() : true;\n  }\n\n  public updateCell(x: number, y: number, code: number, bg: number, fg: number, chars: string): void {\n    this._updateCell(this._vertices.attributes, x, y, code, bg, fg, chars);\n  }\n\n  private _updateCell(array: Float32Array, x: number, y: number, code: number | undefined, bg: number, fg: number, chars?: string): void {\n    const terminal = this._terminal;\n\n    const i = (y * terminal.cols + x) * INDICES_PER_CELL;\n\n    // Exit early if this is a null/space character\n    if (code === NULL_CELL_CODE || code === WHITESPACE_CELL_CODE || code === undefined/* This is used for the right side of wide chars */) {\n      fill(array, 0, i, i + INDICES_PER_CELL - 1 - CELL_POSITION_INDICES);\n      return;\n    }\n\n    let rasterizedGlyph: IRasterizedGlyph;\n    if (!this._atlas) {\n      return;\n    }\n    if (chars && chars.length > 1) {\n      rasterizedGlyph = this._atlas.getRasterizedGlyphCombinedChar(chars, bg, fg);\n    } else {\n      rasterizedGlyph = this._atlas.getRasterizedGlyph(code, bg, fg);\n    }\n\n    // Fill empty if no glyph was found\n    if (!rasterizedGlyph) {\n      fill(array, 0, i, i + INDICES_PER_CELL - 1 - CELL_POSITION_INDICES);\n      return;\n    }\n\n    // a_origin\n    array[i    ] = -rasterizedGlyph.offset.x + this._dimensions.scaledCharLeft;\n    array[i + 1] = -rasterizedGlyph.offset.y + this._dimensions.scaledCharTop;\n    // a_size\n    array[i + 2] = rasterizedGlyph.size.x / this._dimensions.scaledCanvasWidth;\n    array[i + 3] = rasterizedGlyph.size.y / this._dimensions.scaledCanvasHeight;\n    // a_texcoord\n    array[i + 4] = rasterizedGlyph.texturePositionClipSpace.x;\n    array[i + 5] = rasterizedGlyph.texturePositionClipSpace.y;\n    // a_texsize\n    array[i + 6] = rasterizedGlyph.sizeClipSpace.x;\n    array[i + 7] = rasterizedGlyph.sizeClipSpace.y;\n    // a_cellpos only changes on resize\n  }\n\n  public updateSelection(model: IRenderModel): void {\n    const terminal = this._terminal;\n\n    this._vertices.selectionAttributes = slice(this._vertices.attributes, 0);\n\n    const bg = (this._colors.selectionOpaque.rgba >>> 8) | Attributes.CM_RGB;\n\n    if (model.selection.columnSelectMode) {\n      const startCol = model.selection.startCol;\n      const width = model.selection.endCol - startCol;\n      const height = model.selection.viewportCappedEndRow - model.selection.viewportCappedStartRow + 1;\n      for (let y = model.selection.viewportCappedStartRow; y < model.selection.viewportCappedStartRow + height; y++) {\n        this._updateSelectionRange(startCol, startCol + width, y, model, bg);\n      }\n    } else {\n      // Draw first row\n      const startCol = model.selection.viewportStartRow === model.selection.viewportCappedStartRow ? model.selection.startCol : 0;\n      const startRowEndCol = model.selection.viewportCappedStartRow === model.selection.viewportCappedEndRow ? model.selection.endCol : terminal.cols;\n      this._updateSelectionRange(startCol, startRowEndCol, model.selection.viewportCappedStartRow, model, bg);\n\n      // Draw middle rows\n      const middleRowsCount = Math.max(model.selection.viewportCappedEndRow - model.selection.viewportCappedStartRow - 1, 0);\n      for (let y = model.selection.viewportCappedStartRow + 1; y <= model.selection.viewportCappedStartRow + middleRowsCount; y++) {\n        this._updateSelectionRange(0, startRowEndCol, y, model, bg);\n      }\n\n      // Draw final row\n      if (model.selection.viewportCappedStartRow !== model.selection.viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewportStartRow\n        const endCol = model.selection.viewportEndRow === model.selection.viewportCappedEndRow ? model.selection.endCol : terminal.cols;\n        this._updateSelectionRange(0, endCol, model.selection.viewportCappedEndRow, model, bg);\n      }\n    }\n  }\n\n  private _updateSelectionRange(startCol: number, endCol: number, y: number, model: IRenderModel, bg: number): void {\n    const terminal = this._terminal;\n    const row = y + terminal.buffer.active.viewportY;\n    let line: IBufferLine | undefined;\n    for (let x = startCol; x < endCol; x++) {\n      const offset = (y * this._terminal.cols + x) * RENDER_MODEL_INDICIES_PER_CELL;\n      const code = model.cells[offset];\n      let fg = model.cells[offset + RENDER_MODEL_FG_OFFSET];\n      if (fg & FgFlags.INVERSE) {\n        const workCell = new AttributeData();\n        workCell.fg = fg;\n        workCell.bg = model.cells[offset + RENDER_MODEL_BG_OFFSET];\n        // Get attributes from fg (excluding inverse) and resolve inverse by pullibng rgb colors\n        // from bg. This is needed since the inverse fg color should be based on the original bg\n        // color, not on the selection color\n        fg = (fg & ~(Attributes.CM_MASK | Attributes.RGB_MASK | FgFlags.INVERSE));\n        switch (workCell.getBgColorMode()) {\n          case Attributes.CM_P16:\n          case Attributes.CM_P256:\n            const c = this._getColorFromAnsiIndex(workCell.getBgColor()).rgba;\n            fg |= (c >> 8) & Attributes.RED_MASK | (c >> 8) & Attributes.GREEN_MASK | (c >> 8) & Attributes.BLUE_MASK;\n          case Attributes.CM_RGB:\n            const arr = AttributeData.toColorRGB(workCell.getBgColor());\n            fg |= arr[0] << Attributes.RED_SHIFT | arr[1] << Attributes.GREEN_SHIFT | arr[2] << Attributes.BLUE_SHIFT;\n          case Attributes.CM_DEFAULT:\n          default:\n            const c2 = this._colors.background.rgba;\n            fg |= (c2 >> 8) & Attributes.RED_MASK | (c2 >> 8) & Attributes.GREEN_MASK | (c2 >> 8) & Attributes.BLUE_MASK;\n        }\n        fg |= Attributes.CM_RGB;\n      }\n      if (code & COMBINED_CHAR_BIT_MASK) {\n        if (!line) {\n          line = terminal.buffer.active.getLine(row);\n        }\n        const chars = line!.getCell(x)!.getChars();\n        this._updateCell(this._vertices.selectionAttributes, x, y, model.cells[offset], bg, fg, chars);\n      } else {\n        this._updateCell(this._vertices.selectionAttributes, x, y, model.cells[offset], bg, fg);\n      }\n    }\n  }\n\n  private _getColorFromAnsiIndex(idx: number): IColor {\n    if (idx >= this._colors.ansi.length) {\n      throw new Error('No color found for idx ' + idx);\n    }\n    return this._colors.ansi[idx];\n  }\n\n  public onResize(): void {\n    const terminal = this._terminal;\n    const gl = this._gl;\n\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n    // Update vertices\n    const newCount = terminal.cols * terminal.rows * INDICES_PER_CELL;\n    if (this._vertices.count !== newCount) {\n      this._vertices.count = newCount;\n      this._vertices.attributes = new Float32Array(newCount);\n      for (let i = 0; i < this._vertices.attributesBuffers.length; i++) {\n        this._vertices.attributesBuffers[i] = new Float32Array(newCount);\n      }\n\n      let i = 0;\n      for (let y = 0; y < terminal.rows; y++) {\n        for (let x = 0; x < terminal.cols; x++) {\n          this._vertices.attributes[i + 8] = x / terminal.cols;\n          this._vertices.attributes[i + 9] = y / terminal.rows;\n          i += INDICES_PER_CELL;\n        }\n      }\n    }\n  }\n\n  public setColors(): void {\n  }\n\n  public render(renderModel: IRenderModel, isSelectionVisible: boolean): void {\n    if (!this._atlas) {\n      return;\n    }\n\n    const gl = this._gl;\n\n    gl.useProgram(this._program);\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Alternate buffers each frame as the active buffer gets locked while it's in use by the GPU\n    this._activeBuffer = (this._activeBuffer + 1) % 2;\n    const activeBuffer = this._vertices.attributesBuffers[this._activeBuffer];\n\n    // Copy data for each cell of each line up to its line length (the last non-whitespace cell)\n    // from the attributes buffer into activeBuffer, which is the one that gets bound to the GPU.\n    // The reasons for this are as follows:\n    // - So the active buffer can be alternated so we don't get blocked on rendering finishing\n    // - To copy either the normal attributes buffer or the selection attributes buffer when there\n    //   is a selection\n    // - So we don't send vertices for all the line-ending whitespace to the GPU\n    let bufferLength = 0;\n    for (let y = 0; y < renderModel.lineLengths.length; y++) {\n      const si = y * this._terminal.cols * INDICES_PER_CELL;\n      const sub = (isSelectionVisible ? this._vertices.selectionAttributes : this._vertices.attributes).subarray(si, si + renderModel.lineLengths[y] * INDICES_PER_CELL);\n      activeBuffer.set(sub, bufferLength);\n      bufferLength += sub.length;\n    }\n\n    // Bind the attributes buffer\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, activeBuffer.subarray(0, bufferLength), gl.STREAM_DRAW);\n\n    // Bind the texture atlas if it's changed\n    if (this._atlas.hasCanvasChanged) {\n      this._atlas.hasCanvasChanged = false;\n      gl.uniform1i(this._textureLocation, 0);\n      gl.activeTexture(gl.TEXTURE0 + 0);\n      gl.bindTexture(gl.TEXTURE_2D, this._atlasTexture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this._atlas.cacheCanvas);\n      gl.generateMipmap(gl.TEXTURE_2D);\n    }\n\n    // Set uniforms\n    gl.uniformMatrix4fv(this._projectionLocation, false, PROJECTION_MATRIX);\n    gl.uniform2f(this._resolutionLocation, gl.canvas.width, gl.canvas.height);\n\n    // Draw the viewport\n    gl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, bufferLength / INDICES_PER_CELL);\n  }\n\n  public setAtlas(atlas: WebglCharAtlas): void {\n    const gl = this._gl;\n    this._atlas = atlas;\n\n    gl.bindTexture(gl.TEXTURE_2D, this._atlasTexture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, atlas.cacheCanvas);\n    gl.generateMipmap(gl.TEXTURE_2D);\n  }\n\n  public setDimensions(dimensions: IRenderDimensions): void {\n    this._dimensions = dimensions;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport type TypedArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\n\nexport function slice<T extends TypedArray>(array: T, start?: number, end?: number): T {\n  // all modern engines that support .slice\n  if (array.slice) {\n    return array.slice(start, end) as T;\n  }\n  return sliceFallback(array, start, end);\n}\n\nexport function sliceFallback<T extends TypedArray>(array: T, start: number = 0, end: number = array.length): T {\n  if (start < 0) {\n    start = (array.length + start) % array.length;\n  }\n  if (end >= array.length) {\n    end = array.length;\n  } else {\n    end = (array.length + end) % array.length;\n  }\n  start = Math.min(start, end);\n\n  const result: T = new (array.constructor as any)(end - start);\n  for (let i = 0; i < end - start; ++i) {\n    result[i] = array[i + start];\n  }\n  return result;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal } from 'xterm';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/atlas/Constants';\nimport { is256Color } from '../atlas/CharAtlasUtils';\nimport { ITerminal, IColorSet, ILinkifierEvent } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\n\nexport class LinkRenderLayer extends BaseRenderLayer {\n  private _state: ILinkifierEvent | undefined;\n\n  constructor(container: HTMLElement, zIndex: number, colors: IColorSet, terminal: ITerminal) {\n    super(container, 'link', zIndex, true, colors);\n    terminal.linkifier.onShowLinkUnderline(e => this._onShowLinkUnderline(e));\n    terminal.linkifier.onHideLinkUnderline(e => this._onHideLinkUnderline(e));\n\n    terminal.linkifier2.onShowLinkUnderline(e => this._onShowLinkUnderline(e));\n    terminal.linkifier2.onHideLinkUnderline(e => this._onHideLinkUnderline(e));\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    super.resize(terminal, dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = undefined;\n  }\n\n  public reset(terminal: Terminal): void {\n    this._clearCurrentLink();\n  }\n\n  private _clearCurrentLink(): void {\n    if (this._state) {\n      this._clearCells(this._state.x1, this._state.y1, this._state.cols - this._state.x1, 1);\n      const middleRowCount = this._state.y2 - this._state.y1 - 1;\n      if (middleRowCount > 0) {\n        this._clearCells(0, this._state.y1 + 1, this._state.cols, middleRowCount);\n      }\n      this._clearCells(0, this._state.y2, this._state.x2, 1);\n      this._state = undefined;\n    }\n  }\n\n  private _onShowLinkUnderline(e: ILinkifierEvent): void {\n    if (e.fg === INVERTED_DEFAULT_COLOR) {\n      this._ctx.fillStyle = this._colors.background.css;\n    } else if (e.fg !== undefined && is256Color(e.fg)) {\n      // 256 color support\n      this._ctx.fillStyle = this._colors.ansi[e.fg!].css;\n    } else {\n      this._ctx.fillStyle = this._colors.foreground.css;\n    }\n\n    if (e.y1 === e.y2) {\n      // Single line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.x2 - e.x1);\n    } else {\n      // Multi-line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.cols - e.x1);\n      for (let y = e.y1 + 1; y < e.y2; y++) {\n        this._fillBottomLineAtCells(0, y, e.cols);\n      }\n      this._fillBottomLineAtCells(0, e.y2, e.x2);\n    }\n    this._state = e;\n  }\n\n  private _onHideLinkUnderline(e: ILinkifierEvent): void {\n    this._clearCurrentLink();\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharAtlasConfig } from './Types';\nimport { DIM_OPACITY } from 'browser/renderer/atlas/Constants';\nimport { IRasterizedGlyph, IBoundingBox, IRasterizedGlyphSet } from '../Types';\nimport { DEFAULT_COLOR, Attributes } from 'common/buffer/Constants';\nimport { throwIfFalsy } from '../WebglUtils';\nimport { IColor } from 'browser/Types';\nimport { IDisposable } from 'xterm';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { channels, rgba } from 'browser/Color';\n\n// In practice we're probably never going to exhaust a texture this large. For debugging purposes,\n// however, it can be useful to set this to a really tiny value, to verify that LRU eviction works.\nconst TEXTURE_WIDTH = 1024;\nconst TEXTURE_HEIGHT = 1024;\n\n/**\n * The amount of the texture to be filled before throwing it away and starting\n * again. Since the throw away and individual glyph draws don't cost too much,\n * this prevent juggling multiple textures in the GL context.\n */\nconst TEXTURE_CAPACITY = Math.floor(TEXTURE_HEIGHT * 0.8);\n\nconst TRANSPARENT_COLOR = {\n  css: 'rgba(0, 0, 0, 0)',\n  rgba: 0\n};\n\n/**\n * A shared object which is used to draw nothing for a particular cell.\n */\nconst NULL_RASTERIZED_GLYPH: IRasterizedGlyph = {\n  offset: { x: 0, y: 0 },\n  texturePosition: { x: 0, y: 0 },\n  texturePositionClipSpace: { x: 0, y: 0 },\n  size: { x: 0, y: 0 },\n  sizeClipSpace: { x: 0, y: 0 }\n};\n\nconst TMP_CANVAS_GLYPH_PADDING = 2;\n\nexport class WebglCharAtlas implements IDisposable {\n  private _didWarmUp: boolean = false;\n\n  private _cacheMap: { [code: number]: IRasterizedGlyphSet } = {};\n  private _cacheMapCombined: { [chars: string]: IRasterizedGlyphSet } = {};\n\n  // The texture that the atlas is drawn to\n  public cacheCanvas: HTMLCanvasElement;\n  private _cacheCtx: CanvasRenderingContext2D;\n\n  private _tmpCanvas: HTMLCanvasElement;\n  // A temporary context that glyphs are drawn to before being transfered to the atlas.\n  private _tmpCtx: CanvasRenderingContext2D;\n\n  // Since glyphs are expected to be around the same height, the packing\n  // strategy used it to fill a row with glyphs while keeping track of the\n  // tallest glyph in the row. Once the row is full a new row is started at\n  // (0,lastRow+lastRowTallestGlyph).\n  private _currentRowY: number = 0;\n  private _currentRowX: number = 0;\n  private _currentRowHeight: number = 0;\n\n  public hasCanvasChanged = false;\n\n  private _workBoundingBox: IBoundingBox = { top: 0, left: 0, bottom: 0, right: 0 };\n  private _workAttributeData: AttributeData = new AttributeData();\n\n  constructor(\n    document: Document,\n    private _config: ICharAtlasConfig\n  ) {\n    this.cacheCanvas = document.createElement('canvas');\n    this.cacheCanvas.width = TEXTURE_WIDTH;\n    this.cacheCanvas.height = TEXTURE_HEIGHT;\n    // The canvas needs alpha because we use clearColor to convert the background color to alpha.\n    // It might also contain some characters with transparent backgrounds if allowTransparency is\n    // set.\n    this._cacheCtx = throwIfFalsy(this.cacheCanvas.getContext('2d', {alpha: true}));\n\n    this._tmpCanvas = document.createElement('canvas');\n    this._tmpCanvas.width = this._config.scaledCharWidth * 2 + TMP_CANVAS_GLYPH_PADDING * 2;\n    this._tmpCanvas.height = this._config.scaledCharHeight + TMP_CANVAS_GLYPH_PADDING * 2;\n    this._tmpCtx = throwIfFalsy(this._tmpCanvas.getContext('2d', {alpha: this._config.allowTransparency}));\n  }\n\n  public dispose(): void {\n    if (this.cacheCanvas.parentElement) {\n      this.cacheCanvas.parentElement.removeChild(this.cacheCanvas);\n    }\n  }\n\n  public warmUp(): void {\n    if (!this._didWarmUp) {\n      this._doWarmUp();\n      this._didWarmUp = true;\n    }\n  }\n\n  protected _doWarmUp(): void {\n    // Pre-fill with ASCII 33-126\n    for (let i = 33; i < 126; i++) {\n      const rasterizedGlyph = this._drawToCache(i, DEFAULT_COLOR, DEFAULT_COLOR);\n      this._cacheMap[i] = {\n        [DEFAULT_COLOR]: {\n          [DEFAULT_COLOR]: rasterizedGlyph\n        }\n      };\n    }\n  }\n\n  public beginFrame(): boolean {\n    if (this._currentRowY > TEXTURE_CAPACITY) {\n      this._cacheCtx.clearRect(0, 0, TEXTURE_WIDTH, TEXTURE_HEIGHT);\n      this._cacheMap = {};\n      this._currentRowHeight = 0;\n      this._currentRowX = 0;\n      this._currentRowY = 0;\n      this._doWarmUp();\n      return true;\n    }\n    return false;\n  }\n\n  public getRasterizedGlyphCombinedChar(chars: string, bg: number, fg: number): IRasterizedGlyph {\n    let rasterizedGlyphSet = this._cacheMapCombined[chars];\n    if (!rasterizedGlyphSet) {\n      rasterizedGlyphSet = {};\n      this._cacheMapCombined[chars] = rasterizedGlyphSet;\n    }\n    let rasterizedGlyph: IRasterizedGlyph | undefined;\n    const rasterizedGlyphSetBg = rasterizedGlyphSet[bg];\n    if (rasterizedGlyphSetBg) {\n      rasterizedGlyph = rasterizedGlyphSetBg[fg];\n    }\n    if (!rasterizedGlyph) {\n      rasterizedGlyph = this._drawToCache(chars, bg, fg);\n      if (!rasterizedGlyphSet[bg]) {\n        rasterizedGlyphSet[bg] = {};\n      }\n      rasterizedGlyphSet[bg]![fg] = rasterizedGlyph;\n    }\n    return rasterizedGlyph;\n  }\n\n  /**\n   * Gets the glyphs texture coords, drawing the texture if it's not already\n   */\n  public getRasterizedGlyph(code: number, bg: number, fg: number): IRasterizedGlyph {\n    let rasterizedGlyphSet = this._cacheMap[code];\n    if (!rasterizedGlyphSet) {\n      rasterizedGlyphSet = {};\n      this._cacheMap[code] = rasterizedGlyphSet;\n    }\n    let rasterizedGlyph: IRasterizedGlyph | undefined;\n    const rasterizedGlyphSetBg = rasterizedGlyphSet[bg];\n    if (rasterizedGlyphSetBg) {\n      rasterizedGlyph = rasterizedGlyphSetBg[fg];\n    }\n    if (!rasterizedGlyph) {\n      rasterizedGlyph = this._drawToCache(code, bg, fg);\n      if (!rasterizedGlyphSet[bg]) {\n        rasterizedGlyphSet[bg] = {};\n      }\n      rasterizedGlyphSet[bg]![fg] = rasterizedGlyph;\n    }\n    return rasterizedGlyph;\n  }\n\n  private _getColorFromAnsiIndex(idx: number): IColor {\n    if (idx >= this._config.colors.ansi.length) {\n      throw new Error('No color found for idx ' + idx);\n    }\n    return this._config.colors.ansi[idx];\n  }\n\n  private _getBackgroundColor(bgColorMode: number, bgColor: number, inverse: boolean): IColor {\n    if (this._config.allowTransparency) {\n      // The background color might have some transparency, so we need to render it as fully\n      // transparent in the atlas. Otherwise we'd end up drawing the transparent background twice\n      // around the anti-aliased edges of the glyph, and it would look too dark.\n      return TRANSPARENT_COLOR;\n    }\n\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        return this._getColorFromAnsiIndex(bgColor);\n      case Attributes.CM_RGB:\n        const arr = AttributeData.toColorRGB(bgColor);\n        // TODO: This object creation is slow\n        return {\n          rgba: bgColor << 8,\n          css: `#${toPaddedHex(arr[0])}${toPaddedHex(arr[1])}${toPaddedHex(arr[2])}`\n        };\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.foreground;\n        }\n        return this._config.colors.background;\n    }\n  }\n\n  private _getForegroundCss(bg: number, bgColorMode: number, bgColor: number, fg: number, fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): string {\n    const minimumContrastCss = this._getMinimumContrastCss(bg, bgColorMode, bgColor, fg, fgColorMode, fgColor, inverse, bold);\n    if (minimumContrastCss) {\n      return minimumContrastCss;\n    }\n\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._config.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        return this._getColorFromAnsiIndex(fgColor).css;\n      case Attributes.CM_RGB:\n        const arr = AttributeData.toColorRGB(fgColor);\n        return channels.toCss(arr[0], arr[1], arr[2]);\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          const bg = this._config.colors.background.css;\n          if (bg.length === 9) {\n            // Remove bg alpha channel if present\n            return bg.substr(0, 7);\n          }\n          return bg;\n        }\n        return this._config.colors.foreground.css;\n    }\n  }\n\n  private _resolveBackgroundRgba(bgColorMode: number, bgColor: number, inverse: boolean): number {\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        return this._getColorFromAnsiIndex(bgColor).rgba;\n      case Attributes.CM_RGB:\n        return bgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.foreground.rgba;\n        }\n        return this._config.colors.background.rgba;\n    }\n  }\n\n  private _resolveForegroundRgba(fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): number {\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._config.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        return this._getColorFromAnsiIndex(fgColor).rgba;\n      case Attributes.CM_RGB:\n        return fgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._config.colors.background.rgba;\n        }\n        return this._config.colors.foreground.rgba;\n    }\n  }\n\n  private _getMinimumContrastCss(bg: number, bgColorMode: number, bgColor: number, fg: number, fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): string | undefined {\n    if (this._config.minimumContrastRatio === 1) {\n      return undefined;\n    }\n\n    // Try get from cache first\n    const adjustedColor = this._config.colors.contrastCache.getCss(bg, fg);\n    if (adjustedColor !== undefined) {\n      return adjustedColor || undefined;\n    }\n\n    const bgRgba = this._resolveBackgroundRgba(bgColorMode, bgColor, inverse);\n    const fgRgba = this._resolveForegroundRgba(fgColorMode, fgColor, inverse, bold);\n    const result = rgba.ensureContrastRatio(bgRgba, fgRgba, this._config.minimumContrastRatio);\n\n    if (!result) {\n      this._config.colors.contrastCache.setCss(bg, fg, null);\n      return undefined;\n    }\n\n    const css = channels.toCss(\n      (result >> 24) & 0xFF,\n      (result >> 16) & 0xFF,\n      (result >> 8) & 0xFF\n    );\n    this._config.colors.contrastCache.setCss(bg, fg, css);\n\n    return css;\n  }\n\n  private _drawToCache(code: number, bg: number, fg: number): IRasterizedGlyph;\n  private _drawToCache(chars: string, bg: number, fg: number): IRasterizedGlyph;\n  private _drawToCache(codeOrChars: number | string, bg: number, fg: number): IRasterizedGlyph {\n    const chars = typeof codeOrChars === 'number' ? String.fromCharCode(codeOrChars) : codeOrChars;\n\n    this.hasCanvasChanged = true;\n\n    this._tmpCtx.save();\n\n    this._workAttributeData.fg = fg;\n    this._workAttributeData.bg = bg;\n\n    const invisible = !!this._workAttributeData.isInvisible();\n    if (invisible) {\n      return NULL_RASTERIZED_GLYPH;\n    }\n\n    const bold = !!this._workAttributeData.isBold();\n    const inverse = !!this._workAttributeData.isInverse();\n    const dim = !!this._workAttributeData.isDim();\n    const italic = !!this._workAttributeData.isItalic();\n    let fgColor = this._workAttributeData.getFgColor();\n    let fgColorMode = this._workAttributeData.getFgColorMode();\n    let bgColor = this._workAttributeData.getBgColor();\n    let bgColorMode = this._workAttributeData.getBgColorMode();\n    if (inverse) {\n      const temp = fgColor;\n      fgColor = bgColor;\n      bgColor = temp;\n      const temp2 = fgColorMode;\n      fgColorMode = bgColorMode;\n      bgColorMode = temp2;\n    }\n\n    // draw the background\n    const backgroundColor = this._getBackgroundColor(bgColorMode, bgColor, inverse);\n    // Use a 'copy' composite operation to clear any existing glyph out of _tmpCtxWithAlpha, regardless of\n    // transparency in backgroundColor\n    this._tmpCtx.globalCompositeOperation = 'copy';\n    this._tmpCtx.fillStyle = backgroundColor.css;\n    this._tmpCtx.fillRect(0, 0, this._tmpCanvas.width, this._tmpCanvas.height);\n    this._tmpCtx.globalCompositeOperation = 'source-over';\n\n    // draw the foreground/glyph\n    const fontWeight = bold ? this._config.fontWeightBold : this._config.fontWeight;\n    const fontStyle = italic ? 'italic' : '';\n    this._tmpCtx.font =\n      `${fontStyle} ${fontWeight} ${this._config.fontSize * this._config.devicePixelRatio}px ${this._config.fontFamily}`;\n    this._tmpCtx.textBaseline = 'middle';\n\n    this._tmpCtx.fillStyle = this._getForegroundCss(bg, bgColorMode, bgColor, fg, fgColorMode, fgColor, inverse, bold);\n\n    // Apply alpha to dim the character\n    if (dim) {\n      this._tmpCtx.globalAlpha = DIM_OPACITY;\n    }\n\n    // Draw the character\n    this._tmpCtx.fillText(chars, TMP_CANVAS_GLYPH_PADDING, TMP_CANVAS_GLYPH_PADDING + this._config.scaledCharHeight / 2);\n    this._tmpCtx.restore();\n\n    // clear the background from the character to avoid issues with drawing over the previous\n    // character if it extends past it's bounds\n    const imageData = this._tmpCtx.getImageData(\n      0, 0, this._tmpCanvas.width, this._tmpCanvas.height\n    );\n\n    // TODO: Support transparency\n    // let isEmpty = false;\n    // if (!this._config.allowTransparency) {\n    //   isEmpty = clearColor(imageData, backgroundColor);\n    // }\n\n    // Clear out the background color and determine if the glyph is empty.\n    const isEmpty = clearColor(imageData, backgroundColor);\n\n    // Handle empty glyphs\n    if (isEmpty) {\n      return NULL_RASTERIZED_GLYPH;\n    }\n\n    const rasterizedGlyph = this._findGlyphBoundingBox(imageData, this._workBoundingBox);\n    const clippedImageData = this._clipImageData(imageData, this._workBoundingBox);\n\n    // Check if there is enough room in the current row and go to next if needed\n    if (this._currentRowX + this._config.scaledCharWidth > TEXTURE_WIDTH) {\n      this._currentRowX = 0;\n      this._currentRowY += this._currentRowHeight;\n      this._currentRowHeight = 0;\n    }\n\n    // Record texture position\n    rasterizedGlyph.texturePosition.x = this._currentRowX;\n    rasterizedGlyph.texturePosition.y = this._currentRowY;\n    rasterizedGlyph.texturePositionClipSpace.x = this._currentRowX / TEXTURE_WIDTH;\n    rasterizedGlyph.texturePositionClipSpace.y = this._currentRowY / TEXTURE_HEIGHT;\n\n    // Update atlas current row\n    this._currentRowHeight = Math.max(this._currentRowHeight, rasterizedGlyph.size.y);\n    this._currentRowX += rasterizedGlyph.size.x;\n\n    // putImageData doesn't do any blending, so it will overwrite any existing cache entry for us\n    this._cacheCtx.putImageData(clippedImageData, rasterizedGlyph.texturePosition.x, rasterizedGlyph.texturePosition.y);\n\n    return rasterizedGlyph;\n  }\n\n  /**\n   * Given an ImageData object, find the bounding box of the non-transparent\n   * portion of the texture and return an IRasterizedGlyph with these\n   * dimensions.\n   * @param imageData The image data to read.\n   * @param boundingBox An IBoundingBox to put the clipped bounding box values.\n   */\n  private _findGlyphBoundingBox(imageData: ImageData, boundingBox: IBoundingBox): IRasterizedGlyph {\n    boundingBox.top = 0;\n    let found = false;\n    for (let y = 0; y < this._tmpCanvas.height; y++) {\n      for (let x = 0; x < this._tmpCanvas.width; x++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.top = y;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.left = 0;\n    found = false;\n    for (let x = 0; x < this._tmpCanvas.width; x++) {\n      for (let y = 0; y < this._tmpCanvas.height; y++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.left = x;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.right = this._tmpCanvas.width;\n    found = false;\n    for (let x = this._tmpCanvas.width - 1; x >= 0; x--) {\n      for (let y = 0; y < this._tmpCanvas.height; y++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.right = x;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    boundingBox.bottom = this._tmpCanvas.height;\n    found = false;\n    for (let y = this._tmpCanvas.height - 1; y >= 0; y--) {\n      for (let x = 0; x < this._tmpCanvas.width; x++) {\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\n        if (imageData.data[alphaOffset] !== 0) {\n          boundingBox.bottom = y;\n          found = true;\n          break;\n        }\n      }\n      if (found) {\n        break;\n      }\n    }\n    return {\n      texturePosition: { x: 0, y: 0 },\n      texturePositionClipSpace: { x: 0, y: 0 },\n      size: {\n        x: boundingBox.right - boundingBox.left + 1,\n        y: boundingBox.bottom - boundingBox.top + 1\n      },\n      sizeClipSpace: {\n        x: (boundingBox.right - boundingBox.left + 1) / TEXTURE_WIDTH,\n        y: (boundingBox.bottom - boundingBox.top + 1) / TEXTURE_HEIGHT\n      },\n      offset: {\n        x: -boundingBox.left + TMP_CANVAS_GLYPH_PADDING,\n        y: -boundingBox.top + TMP_CANVAS_GLYPH_PADDING\n      }\n    };\n  }\n\n  private _clipImageData(imageData: ImageData, boundingBox: IBoundingBox): ImageData {\n    const width = boundingBox.right - boundingBox.left + 1;\n    const height = boundingBox.bottom - boundingBox.top + 1;\n    const clippedData = new Uint8ClampedArray(width * height * 4);\n    for (let y = boundingBox.top; y <= boundingBox.bottom; y++) {\n      for (let x = boundingBox.left; x <= boundingBox.right; x++) {\n        const oldOffset = y * this._tmpCanvas.width * 4 + x * 4;\n        const newOffset = (y - boundingBox.top) * width * 4 + (x - boundingBox.left) * 4;\n        clippedData[newOffset] = imageData.data[oldOffset];\n        clippedData[newOffset + 1] = imageData.data[oldOffset + 1];\n        clippedData[newOffset + 2] = imageData.data[oldOffset + 2];\n        clippedData[newOffset + 3] = imageData.data[oldOffset + 3];\n      }\n    }\n    return new ImageData(clippedData, width, height);\n  }\n}\n\n/**\n * Makes a partiicular rgb color in an ImageData completely transparent.\n * @returns True if the result is \"empty\", meaning all pixels are fully transparent.\n */\nfunction clearColor(imageData: ImageData, color: IColor): boolean {\n  let isEmpty = true;\n  const r = color.rgba >>> 24;\n  const g = color.rgba >>> 16 & 0xFF;\n  const b = color.rgba >>> 8 & 0xFF;\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\n    if (imageData.data[offset] === r &&\n        imageData.data[offset + 1] === g &&\n        imageData.data[offset + 2] === b) {\n      imageData.data[offset + 3] = 0;\n    } else {\n      isEmpty = false;\n    }\n  }\n  return isEmpty;\n}\n\nfunction toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColor } from 'browser/Types';\n\n/**\n * Helper functions where the source type is \"channels\" (individual color channels as numbers).\n */\nexport namespace channels {\n  export function toCss(r: number, g: number, b: number, a?: number): string {\n    if (a !== undefined) {\n      return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}${toPaddedHex(a)}`;\n    }\n    return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}`;\n  }\n\n  export function toRgba(r: number, g: number, b: number, a: number = 0xFF): number {\n    // >>> 0 forces an unsigned int\n    return (r << 24 | g << 16 | b << 8 | a) >>> 0;\n  }\n}\n\n/**\n * Helper functions where the source type is `IColor`.\n */\nexport namespace color {\n  export function blend(bg: IColor, fg: IColor): IColor {\n    const a = (fg.rgba & 0xFF) / 255;\n    if (a === 1) {\n      return {\n        css: fg.css,\n        rgba: fg.rgba\n      };\n    }\n    const fgR = (fg.rgba >> 24) & 0xFF;\n    const fgG = (fg.rgba >> 16) & 0xFF;\n    const fgB = (fg.rgba >> 8) & 0xFF;\n    const bgR = (bg.rgba >> 24) & 0xFF;\n    const bgG = (bg.rgba >> 16) & 0xFF;\n    const bgB = (bg.rgba >> 8) & 0xFF;\n    const r = bgR + Math.round((fgR - bgR) * a);\n    const g = bgG + Math.round((fgG - bgG) * a);\n    const b = bgB + Math.round((fgB - bgB) * a);\n    const css = channels.toCss(r, g, b);\n    const rgba = channels.toRgba(r, g, b);\n    return { css, rgba };\n  }\n\n  export function ensureContrastRatio(bg: IColor, fg: IColor, ratio: number): IColor | undefined {\n    const result = rgba.ensureContrastRatio(bg.rgba, fg.rgba, ratio);\n    if (!result) {\n      return undefined;\n    }\n    return rgba.toColor(\n      (result >> 24 & 0xFF),\n      (result >> 16 & 0xFF),\n      (result >> 8  & 0xFF)\n    );\n  }\n\n  export function opaque(color: IColor): IColor {\n    const rgbaColor = (color.rgba | 0xFF) >>> 0;\n    const [r, g, b] = rgba.toChannels(rgbaColor);\n    return {\n      css: channels.toCss(r, g, b),\n      rgba: rgbaColor\n    };\n  }\n}\n\n/**\n * Helper functions where the source type is \"css\" (string: '#rgb', '#rgba', '#rrggbb', '#rrggbbaa').\n */\nexport namespace css {\n  export function toColor(css: string): IColor {\n    return {\n      css,\n      rgba: (parseInt(css.slice(1), 16) << 8 | 0xFF) >>> 0\n    };\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgb\" (number: 0xrrggbb).\n */\nexport namespace rgb {\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param rgb The color to use.\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance(rgb: number): number {\n    return relativeLuminance2(\n      (rgb >> 16) & 0xFF,\n      (rgb >> 8 ) & 0xFF,\n      (rgb      ) & 0xFF);\n  }\n\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param r The red channel (0x00 to 0xFF).\n   * @param g The green channel (0x00 to 0xFF).\n   * @param b The blue channel (0x00 to 0xFF).\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance2(r: number, g: number, b: number): number {\n    const rs = r / 255;\n    const gs = g / 255;\n    const bs = b / 255;\n    const rr = rs <= 0.03928 ? rs / 12.92 : Math.pow((rs + 0.055) / 1.055, 2.4);\n    const rg = gs <= 0.03928 ? gs / 12.92 : Math.pow((gs + 0.055) / 1.055, 2.4);\n    const rb = bs <= 0.03928 ? bs / 12.92 : Math.pow((bs + 0.055) / 1.055, 2.4);\n    return rr * 0.2126 + rg * 0.7152 + rb * 0.0722;\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgba\" (number: 0xrrggbbaa).\n */\nexport namespace rgba {\n  export function ensureContrastRatio(bgRgba: number, fgRgba: number, ratio: number): number | undefined {\n    const bgL = rgb.relativeLuminance(bgRgba >> 8);\n    const fgL = rgb.relativeLuminance(fgRgba >> 8);\n    const cr = contrastRatio(bgL, fgL);\n    if (cr < ratio) {\n      if (fgL < bgL) {\n        return reduceLuminance(bgRgba, fgRgba, ratio);\n      }\n      return increaseLuminance(bgRgba, fgRgba, ratio);\n    }\n    return undefined;\n  }\n\n  export function reduceLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to reducing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgB, fgG), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR > 0 || fgG > 0 || fgB > 0)) {\n      // Reduce by 10% until the ratio is hit\n      fgR -= Math.max(0, Math.ceil(fgR * 0.1));\n      fgG -= Math.max(0, Math.ceil(fgG * 0.1));\n      fgB -= Math.max(0, Math.ceil(fgB * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgB, fgG), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function increaseLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to increasing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgB, fgG), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR < 0xFF || fgG < 0xFF || fgB < 0xFF)) {\n      // Increase by 10% until the ratio is hit\n      fgR = Math.min(0xFF, fgR + Math.ceil((255 - fgR) * 0.1));\n      fgG = Math.min(0xFF, fgG + Math.ceil((255 - fgG) * 0.1));\n      fgB = Math.min(0xFF, fgB + Math.ceil((255 - fgB) * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgB, fgG), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function toChannels(value: number): [number, number, number, number] {\n    return [(value >> 24) & 0xFF, (value >> 16) & 0xFF, (value >> 8) & 0xFF, value & 0xFF];\n  }\n\n  export function toColor(r: number, g: number, b: number): IColor {\n    return {\n      css: channels.toCss(r, g, b),\n      rgba: channels.toRgba(r, g, b)\n    };\n  }\n}\n\nexport function toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n\n/**\n * Gets the contrast ratio between two relative luminance values.\n * @param l1 The first relative luminance.\n * @param l2 The first relative luminance.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function contrastRatio(l1: number, l2: number): number {\n  if (l1 < l2) {\n    return (l2 + 0.05) / (l1 + 0.05);\n  }\n  return (l1 + 0.05) / (l2 + 0.05);\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal } from 'xterm';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { ICellData } from 'common/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IColorSet } from 'browser/Types';\nimport { IRenderDimensions, IRequestRedrawEvent } from 'browser/renderer/Types';\nimport { IEventEmitter } from 'common/EventEmitter';\n\ninterface ICursorState {\n  x: number;\n  y: number;\n  isFocused: boolean;\n  style: string;\n  width: number;\n}\n\n/**\n * The time between cursor blinks.\n */\nconst BLINK_INTERVAL = 600;\n\nexport class CursorRenderLayer extends BaseRenderLayer {\n  private _state: ICursorState;\n  private _cursorRenderers: {[key: string]: (terminal: Terminal, x: number, y: number, cell: ICellData) => void};\n  private _cursorBlinkStateManager: CursorBlinkStateManager | undefined;\n  private _cell: ICellData = new CellData();\n\n  constructor(\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    private _onRequestRefreshRowsEvent: IEventEmitter<IRequestRedrawEvent>\n  ) {\n    super(container, 'cursor', zIndex, true, colors);\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n    this._cursorRenderers = {\n      'bar': this._renderBarCursor.bind(this),\n      'block': this._renderBlockCursor.bind(this),\n      'underline': this._renderUnderlineCursor.bind(this)\n    };\n    // TODO: Consider initial options? Maybe onOptionsChanged should be called at the end of open?\n  }\n\n  public resize(terminal: Terminal, dim: IRenderDimensions): void {\n    super.resize(terminal, dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n  }\n\n  public reset(terminal: Terminal): void {\n    this._clearCursor();\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.dispose();\n      this.onOptionsChanged(terminal);\n    }\n  }\n\n  public onBlur(terminal: Terminal): void {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.pause();\n    }\n    this._onRequestRefreshRowsEvent.fire({ start: terminal.buffer.active.cursorY, end: terminal.buffer.active.cursorY });\n  }\n\n  public onFocus(terminal: Terminal): void {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.resume(terminal);\n    } else {\n      this._onRequestRefreshRowsEvent.fire({ start: terminal.buffer.active.cursorY, end: terminal.buffer.active.cursorY });\n    }\n  }\n\n  public onOptionsChanged(terminal: Terminal): void {\n    if (terminal.getOption('cursorBlink')) {\n      if (!this._cursorBlinkStateManager) {\n        this._cursorBlinkStateManager = new CursorBlinkStateManager(terminal, () => {\n          this._render(terminal, true);\n        });\n      }\n    } else {\n      this._cursorBlinkStateManager?.dispose();\n      this._cursorBlinkStateManager = undefined;\n    }\n    // Request a refresh from the terminal as management of rendering is being\n    // moved back to the terminal\n    this._onRequestRefreshRowsEvent.fire({ start: terminal.buffer.active.cursorY, end: terminal.buffer.active.cursorY });\n  }\n\n  public onCursorMove(terminal: Terminal): void {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\n    }\n  }\n\n  public onGridChanged(terminal: Terminal, startRow: number, endRow: number): void {\n    if (!this._cursorBlinkStateManager || this._cursorBlinkStateManager.isPaused) {\n      this._render(terminal, false);\n    } else {\n      this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\n    }\n  }\n\n  private _render(terminal: Terminal, triggeredByAnimationFrame: boolean): void {\n    // Don't draw the cursor if it's hidden\n    // TODO: Need to expose API for this\n    if (!(terminal as any)._core._coreService.isCursorInitialized || (terminal as any)._core._coreService.isCursorHidden) {\n      this._clearCursor();\n      return;\n    }\n\n    const cursorY = terminal.buffer.active.baseY + terminal.buffer.active.cursorY;\n    const viewportRelativeCursorY = cursorY - terminal.buffer.active.viewportY;\n\n    // in case cursor.x == cols adjust visual cursor to cols - 1\n    const cursorX = Math.min(terminal.buffer.active.cursorX, terminal.cols - 1);\n\n    // Don't draw the cursor if it's off-screen\n    if (viewportRelativeCursorY < 0 || viewportRelativeCursorY >= terminal.rows) {\n      this._clearCursor();\n      return;\n    }\n\n    // TODO: Need fast buffer API for loading cell\n    (terminal as any)._core.buffer.lines.get(cursorY).loadCell(cursorX, this._cell);\n    if (this._cell.content === undefined) {\n      return;\n    }\n\n    if (!isTerminalFocused(terminal)) {\n      this._clearCursor();\n      this._ctx.save();\n      this._ctx.fillStyle = this._colors.cursor.css;\n      const cursorStyle = terminal.getOption('cursorStyle');\n      if (cursorStyle && cursorStyle !== 'block') {\n        this._cursorRenderers[cursorStyle](terminal, cursorX, viewportRelativeCursorY, this._cell);\n      } else {\n        this._renderBlurCursor(terminal, cursorX, viewportRelativeCursorY, this._cell);\n      }\n      this._ctx.restore();\n      this._state.x = cursorX;\n      this._state.y = viewportRelativeCursorY;\n      this._state.isFocused = false;\n      this._state.style = cursorStyle;\n      this._state.width = this._cell.getWidth();\n      return;\n    }\n\n    // Don't draw the cursor if it's blinking\n    if (this._cursorBlinkStateManager && !this._cursorBlinkStateManager.isCursorVisible) {\n      this._clearCursor();\n      return;\n    }\n\n    if (this._state) {\n      // The cursor is already in the correct spot, don't redraw\n      if (this._state.x === cursorX &&\n          this._state.y === viewportRelativeCursorY &&\n          this._state.isFocused === isTerminalFocused(terminal) &&\n          this._state.style === terminal.getOption('cursorStyle') &&\n          this._state.width === this._cell.getWidth()) {\n        return;\n      }\n      this._clearCursor();\n    }\n\n    this._ctx.save();\n    this._cursorRenderers[terminal.getOption('cursorStyle') || 'block'](terminal, cursorX, viewportRelativeCursorY, this._cell);\n    this._ctx.restore();\n\n    this._state.x = cursorX;\n    this._state.y = viewportRelativeCursorY;\n    this._state.isFocused = false;\n    this._state.style = terminal.getOption('cursorStyle');\n    this._state.width = this._cell.getWidth();\n  }\n\n  private _clearCursor(): void {\n    if (this._state) {\n      this._clearCells(this._state.x, this._state.y, this._state.width, 1);\n      this._state = {\n        x: 0,\n        y: 0,\n        isFocused: false,\n        style: '',\n        width: 0\n      };\n    }\n  }\n\n  private _renderBarCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillLeftLineAtCell(x, y, terminal.getOption('cursorWidth'));\n    this._ctx.restore();\n  }\n\n  private _renderBlockCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillCells(x, y, cell.getWidth(), 1);\n    this._ctx.fillStyle = this._colors.cursorAccent.css;\n    this._fillCharTrueColor(terminal, cell, x, y);\n    this._ctx.restore();\n  }\n\n  private _renderUnderlineCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillBottomLineAtCells(x, y);\n    this._ctx.restore();\n  }\n\n  private _renderBlurCursor(terminal: Terminal, x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.strokeStyle = this._colors.cursor.css;\n    this._strokeRectAtCell(x, y, cell.getWidth(), 1);\n    this._ctx.restore();\n  }\n}\n\nclass CursorBlinkStateManager {\n  public isCursorVisible: boolean;\n\n  private _animationFrame: number | undefined;\n  private _blinkStartTimeout: number | undefined;\n  private _blinkInterval: number | undefined;\n\n  /**\n   * The time at which the animation frame was restarted, this is used on the\n   * next render to restart the timers so they don't need to restart the timers\n   * multiple times over a short period.\n   */\n  private _animationTimeRestarted: number | undefined;\n\n  constructor(\n    terminal: Terminal,\n    private _renderCallback: () => void\n  ) {\n    this.isCursorVisible = true;\n    if (isTerminalFocused(terminal)) {\n      this._restartInterval();\n    }\n  }\n\n  public get isPaused(): boolean { return !(this._blinkStartTimeout || this._blinkInterval); }\n\n  public dispose(): void {\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public restartBlinkAnimation(terminal: Terminal): void {\n    if (this.isPaused) {\n      return;\n    }\n    // Save a timestamp so that the restart can be done on the next interval\n    this._animationTimeRestarted = Date.now();\n    // Force a cursor render to ensure it's visible and in the correct position\n    this.isCursorVisible = true;\n    if (!this._animationFrame) {\n      this._animationFrame = window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n    }\n  }\n\n  private _restartInterval(timeToStart: number = BLINK_INTERVAL): void {\n    // Clear any existing interval\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n    }\n\n    // Setup the initial timeout which will hide the cursor, this is done before\n    // the regular interval is setup in order to support restarting the blink\n    // animation in a lightweight way (without thrashing clearInterval and\n    // setInterval).\n    this._blinkStartTimeout = window.setTimeout(() => {\n      // Check if another animation restart was requested while this was being\n      // started\n      if (this._animationTimeRestarted) {\n        const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n        this._animationTimeRestarted = undefined;\n        if (time > 0) {\n          this._restartInterval(time);\n          return;\n        }\n      }\n\n      // Hide the cursor\n      this.isCursorVisible = false;\n      this._animationFrame = window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n\n      // Setup the blink interval\n      this._blinkInterval = window.setInterval(() => {\n        // Adjust the animation time if it was restarted\n        if (this._animationTimeRestarted) {\n          // calc time diff\n          // Make restart interval do a setTimeout initially?\n          const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n          this._animationTimeRestarted = undefined;\n          this._restartInterval(time);\n          return;\n        }\n\n        // Invert visibility and render\n        this.isCursorVisible = !this.isCursorVisible;\n        this._animationFrame = window.requestAnimationFrame(() => {\n          this._renderCallback();\n          this._animationFrame = undefined;\n        });\n      }, BLINK_INTERVAL);\n    }, timeToStart);\n  }\n\n  public pause(): void {\n    this.isCursorVisible = true;\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public resume(terminal: Terminal): void {\n    // Clear out any existing timers just in case\n    this.pause();\n\n    this._animationTimeRestarted = undefined;\n    this._restartInterval();\n    this.restartBlinkAnimation(terminal);\n  }\n}\n\nfunction isTerminalFocused(terminal: Terminal): boolean {\n  return document.activeElement === terminal.textarea && document.hasFocus();\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Polyfill - Convert UTF32 codepoint into JS string.\n * Note: The built-in String.fromCodePoint happens to be much slower\n *       due to additional sanity checks. We can avoid them since\n *       we always operate on legal UTF32 (granted by the input decoders)\n *       and use this faster version instead.\n */\nexport function stringFromCodePoint(codePoint: number): string {\n  if (codePoint > 0xFFFF) {\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\n  }\n  return String.fromCharCode(codePoint);\n}\n\n/**\n * Convert UTF32 char codes into JS string.\n * Basically the same as `stringFromCodePoint` but for multiple codepoints\n * in a loop (which is a lot faster).\n */\nexport function utf32ToString(data: Uint32Array, start: number = 0, end: number = data.length): string {\n  let result = '';\n  for (let i = start; i < end; ++i) {\n    let codepoint = data[i];\n    if (codepoint > 0xFFFF) {\n      // JS strings are encoded as UTF16, thus a non BMP codepoint gets converted into a surrogate pair\n      // conversion rules:\n      //  - subtract 0x10000 from code point, leaving a 20 bit number\n      //  - add high 10 bits to 0xD800  --> first surrogate\n      //  - add low 10 bits to 0xDC00   --> second surrogate\n      codepoint -= 0x10000;\n      result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\n    } else {\n      result += String.fromCharCode(codepoint);\n    }\n  }\n  return result;\n}\n\n/**\n * StringToUtf32 - decodes UTF16 sequences into UTF32 codepoints.\n * To keep the decoder in line with JS strings it handles single surrogates as UCS2.\n */\nexport class StringToUtf32 {\n  private _interim: number = 0;\n\n  /**\n   * Clears interim and resets decoder to clean state.\n   */\n  public clear(): void {\n    this._interim = 0;\n  }\n\n  /**\n   * Decode JS string to UTF32 codepoints.\n   * The methods assumes stream input and will store partly transmitted\n   * surrogate pairs and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided input data does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: string, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let startPos = 0;\n\n    // handle leftover surrogate high\n    if (this._interim) {\n      const second = input.charCodeAt(startPos++);\n      if (0xDC00 <= second && second <= 0xDFFF) {\n        target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n      } else {\n        // illegal codepoint (USC2 handling)\n        target[size++] = this._interim;\n        target[size++] = second;\n      }\n      this._interim = 0;\n    }\n\n    for (let i = startPos; i < length; ++i) {\n      const code = input.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          this._interim = code;\n          return size;\n        }\n        const second = input.charCodeAt(i);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          // illegal codepoint (USC2 handling)\n          target[size++] = code;\n          target[size++] = second;\n        }\n        continue;\n      }\n      target[size++] = code;\n    }\n    return size;\n  }\n}\n\n/**\n * Utf8Decoder - decodes UTF8 byte sequences into UTF32 codepoints.\n */\nexport class Utf8ToUtf32 {\n  public interim: Uint8Array = new Uint8Array(3);\n\n  /**\n   * Clears interim bytes and resets decoder to clean state.\n   */\n  public clear(): void {\n    this.interim.fill(0);\n  }\n\n  /**\n   * Decodes UTF8 byte sequences in `input` to UTF32 codepoints in `target`.\n   * The methods assumes stream input and will store partly transmitted bytes\n   * and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided data chunk does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: Uint8Array, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let byte1: number;\n    let byte2: number;\n    let byte3: number;\n    let byte4: number;\n    let codepoint = 0;\n    let startPos = 0;\n\n    // handle leftover bytes\n    if (this.interim[0]) {\n      let discardInterim = false;\n      let cp = this.interim[0];\n      cp &= ((((cp & 0xE0) === 0xC0)) ? 0x1F : (((cp & 0xF0) === 0xE0)) ? 0x0F : 0x07);\n      let pos = 0;\n      let tmp: number;\n      while ((tmp = this.interim[++pos] & 0x3F) && pos < 4) {\n        cp <<= 6;\n        cp |= tmp;\n      }\n      // missing bytes - read ahead from input\n      const type = (((this.interim[0] & 0xE0) === 0xC0)) ? 2 : (((this.interim[0] & 0xF0) === 0xE0)) ? 3 : 4;\n      const missing = type - pos;\n      while (startPos < missing) {\n        if (startPos >= length) {\n          return 0;\n        }\n        tmp = input[startPos++];\n        if ((tmp & 0xC0) !== 0x80) {\n          // wrong continuation, discard interim bytes completely\n          startPos--;\n          discardInterim = true;\n          break;\n        } else {\n          // need to save so we can continue short inputs in next call\n          this.interim[pos++] = tmp;\n          cp <<= 6;\n          cp |= tmp & 0x3F;\n        }\n      }\n      if (!discardInterim) {\n        // final test is type dependent\n        if (type === 2) {\n          if (cp < 0x80) {\n            // wrong starter byte\n            startPos--;\n          } else {\n            target[size++] = cp;\n          }\n        } else if (type === 3) {\n          if (cp < 0x0800 || (cp >= 0xD800 && cp <= 0xDFFF)) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        } else {\n          if (cp < 0x010000 || cp > 0x10FFFF) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        }\n      }\n      this.interim.fill(0);\n    }\n\n    // loop through input\n    const fourStop = length - 4;\n    let i = startPos;\n    while (i < length) {\n      /**\n       * ASCII shortcut with loop unrolled to 4 consecutive ASCII chars.\n       * This is a compromise between speed gain for ASCII\n       * and penalty for non ASCII:\n       * For best ASCII performance the char should be stored directly into target,\n       * but even a single attempt to write to target and compare afterwards\n       * penalizes non ASCII really bad (-50%), thus we load the char into byteX first,\n       * which reduces ASCII performance by ~15%.\n       * This trial for ASCII reduces non ASCII performance by ~10% which seems acceptible\n       * compared to the gains.\n       * Note that this optimization only takes place for 4 consecutive ASCII chars,\n       * for any shorter it bails out. Worst case - all 4 bytes being read but\n       * thrown away due to the last being a non ASCII char (-10% performance).\n       */\n      while (i < fourStop\n        && !((byte1 = input[i]) & 0x80)\n        && !((byte2 = input[i + 1]) & 0x80)\n        && !((byte3 = input[i + 2]) & 0x80)\n        && !((byte4 = input[i + 3]) & 0x80))\n      {\n        target[size++] = byte1;\n        target[size++] = byte2;\n        target[size++] = byte3;\n        target[size++] = byte4;\n        i += 4;\n      }\n\n      // reread byte1\n      byte1 = input[i++];\n\n      // 1 byte\n      if (byte1 < 0x80) {\n        target[size++] = byte1;\n\n        // 2 bytes\n      } else if ((byte1 & 0xE0) === 0xC0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x1F) << 6 | (byte2 & 0x3F);\n        if (codepoint < 0x80) {\n          // wrong starter byte\n          i--;\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 3 bytes\n      } else if ((byte1 & 0xF0) === 0xE0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x0F) << 12 | (byte2 & 0x3F) << 6 | (byte3 & 0x3F);\n        if (codepoint < 0x0800 || (codepoint >= 0xD800 && codepoint <= 0xDFFF)) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 4 bytes\n      } else if ((byte1 & 0xF8) === 0xF0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          this.interim[2] = byte3;\n          return size;\n        }\n        byte4 = input[i++];\n        if ((byte4 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x07) << 18 | (byte2 & 0x3F) << 12 | (byte3 & 0x3F) << 6 | (byte4 & 0x3F);\n        if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n      } else {\n        // illegal byte, just skip\n      }\n    }\n    return size;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { createProgram, expandFloat32Array, PROJECTION_MATRIX, throwIfFalsy } from './WebglUtils';\nimport { IRenderModel, IWebGLVertexArrayObject, IWebGL2RenderingContext, ISelectionRenderModel } from './Types';\nimport { fill } from 'common/TypedArrayUtils';\nimport { Attributes, FgFlags } from 'common/buffer/Constants';\nimport { Terminal } from 'xterm';\nimport { IColorSet, IColor } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { RENDER_MODEL_BG_OFFSET, RENDER_MODEL_FG_OFFSET, RENDER_MODEL_INDICIES_PER_CELL } from './RenderModel';\n\nconst enum VertexAttribLocations {\n  POSITION = 0,\n  SIZE = 1,\n  COLOR = 2,\n  UNIT_QUAD = 3\n}\n\nconst vertexShaderSource = `#version 300 es\nlayout (location = ${VertexAttribLocations.POSITION}) in vec2 a_position;\nlayout (location = ${VertexAttribLocations.SIZE}) in vec2 a_size;\nlayout (location = ${VertexAttribLocations.COLOR}) in vec4 a_color;\nlayout (location = ${VertexAttribLocations.UNIT_QUAD}) in vec2 a_unitquad;\n\nuniform mat4 u_projection;\nuniform vec2 u_resolution;\n\nout vec4 v_color;\n\nvoid main() {\n  vec2 zeroToOne = (a_position + (a_unitquad * a_size)) / u_resolution;\n  gl_Position = u_projection * vec4(zeroToOne, 0.0, 1.0);\n  v_color = a_color;\n}`;\n\nconst fragmentShaderSource = `#version 300 es\nprecision lowp float;\n\nin vec4 v_color;\n\nout vec4 outColor;\n\nvoid main() {\n  outColor = v_color;\n}`;\n\ninterface IVertices {\n  attributes: Float32Array;\n  selection: Float32Array;\n  count: number;\n}\n\nconst INDICES_PER_RECTANGLE = 8;\nconst BYTES_PER_RECTANGLE = INDICES_PER_RECTANGLE * Float32Array.BYTES_PER_ELEMENT;\n\nconst INITIAL_BUFFER_RECTANGLE_CAPACITY = 20 * INDICES_PER_RECTANGLE;\n\nexport class RectangleRenderer {\n\n  private _program: WebGLProgram;\n  private _vertexArrayObject: IWebGLVertexArrayObject;\n  private _resolutionLocation: WebGLUniformLocation;\n  private _attributesBuffer: WebGLBuffer;\n  private _projectionLocation: WebGLUniformLocation;\n  private _bgFloat!: Float32Array;\n  private _selectionFloat!: Float32Array;\n\n  private _vertices: IVertices = {\n    count: 0,\n    attributes: new Float32Array(INITIAL_BUFFER_RECTANGLE_CAPACITY),\n    selection: new Float32Array(3 * INDICES_PER_RECTANGLE)\n  };\n\n  constructor(\n    private _terminal: Terminal,\n    private _colors: IColorSet,\n    private _gl: IWebGL2RenderingContext,\n    private _dimensions: IRenderDimensions\n  ) {\n    const gl = this._gl;\n\n    this._program = throwIfFalsy(createProgram(gl, vertexShaderSource, fragmentShaderSource));\n\n    // Uniform locations\n    this._resolutionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_resolution'));\n    this._projectionLocation = throwIfFalsy(gl.getUniformLocation(this._program, 'u_projection'));\n\n    // Create and set the vertex array object\n    this._vertexArrayObject = gl.createVertexArray();\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    // Setup a_unitquad, this defines the 4 vertices of a rectangle\n    const unitQuadVertices = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n    const unitQuadVerticesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, unitQuadVerticesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, unitQuadVertices, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(VertexAttribLocations.UNIT_QUAD);\n    gl.vertexAttribPointer(VertexAttribLocations.UNIT_QUAD, 2, this._gl.FLOAT, false, 0, 0);\n\n    // Setup the unit quad element array buffer, this points to indices in\n    // unitQuadVertuces to allow is to draw 2 triangles from the vertices\n    const unitQuadElementIndices = new Uint8Array([0, 1, 3, 0, 2, 3]);\n    const elementIndicesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementIndicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, unitQuadElementIndices, gl.STATIC_DRAW);\n\n    // Setup attributes\n    this._attributesBuffer = throwIfFalsy(gl.createBuffer());\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.enableVertexAttribArray(VertexAttribLocations.POSITION);\n    gl.vertexAttribPointer(VertexAttribLocations.POSITION, 2, gl.FLOAT, false, BYTES_PER_RECTANGLE, 0);\n    gl.vertexAttribDivisor(VertexAttribLocations.POSITION, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.SIZE);\n    gl.vertexAttribPointer(VertexAttribLocations.SIZE, 2, gl.FLOAT, false, BYTES_PER_RECTANGLE, 2 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.SIZE, 1);\n    gl.enableVertexAttribArray(VertexAttribLocations.COLOR);\n    gl.vertexAttribPointer(VertexAttribLocations.COLOR, 4, gl.FLOAT, false, BYTES_PER_RECTANGLE, 4 * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribDivisor(VertexAttribLocations.COLOR, 1);\n\n    this._updateCachedColors();\n  }\n\n  public render(): void {\n    const gl = this._gl;\n\n    gl.useProgram(this._program);\n\n    gl.bindVertexArray(this._vertexArrayObject);\n\n    gl.uniformMatrix4fv(this._projectionLocation, false, PROJECTION_MATRIX);\n    gl.uniform2f(this._resolutionLocation, gl.canvas.width, gl.canvas.height);\n\n    // Bind attributes buffer and draw\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this._vertices.attributes, gl.DYNAMIC_DRAW);\n    gl.drawElementsInstanced(this._gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, this._vertices.count);\n\n    // Bind selection buffer and draw\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._attributesBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this._vertices.selection, gl.DYNAMIC_DRAW);\n    gl.drawElementsInstanced(this._gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 0, 3);\n  }\n\n  public onResize(): void {\n    this._updateViewportRectangle();\n  }\n\n  public setColors(): void {\n    this._updateCachedColors();\n    this._updateViewportRectangle();\n  }\n\n  private _updateCachedColors(): void {\n    this._bgFloat = this._colorToFloat32Array(this._colors.background);\n    this._selectionFloat = this._colorToFloat32Array(this._colors.selectionOpaque);\n  }\n\n  private _updateViewportRectangle(): void {\n    // Set first rectangle that clears the screen\n    this._addRectangleFloat(\n      this._vertices.attributes,\n      0,\n      0,\n      0,\n      this._terminal.cols * this._dimensions.scaledCellWidth,\n      this._terminal.rows * this._dimensions.scaledCellHeight,\n      this._bgFloat\n    );\n  }\n\n  public updateSelection(model: ISelectionRenderModel): void {\n    const terminal = this._terminal;\n\n    if (!model.hasSelection) {\n      fill(this._vertices.selection, 0, 0);\n      return;\n    }\n\n    if (model.columnSelectMode) {\n      const startCol = model.startCol;\n      const width = model.endCol - startCol;\n      const height = model.viewportCappedEndRow - model.viewportCappedStartRow + 1;\n      this._addRectangleFloat(\n        this._vertices.selection,\n        0,\n        startCol * this._dimensions.scaledCellWidth,\n        model.viewportCappedStartRow * this._dimensions.scaledCellHeight,\n        width * this._dimensions.scaledCellWidth,\n        height * this._dimensions.scaledCellHeight,\n        this._selectionFloat\n      );\n      fill(this._vertices.selection, 0, INDICES_PER_RECTANGLE);\n    } else {\n      // Draw first row\n      const startCol = model.viewportStartRow === model.viewportCappedStartRow ? model.startCol : 0;\n      const startRowEndCol = model.viewportCappedStartRow === model.viewportCappedEndRow ? model.endCol : terminal.cols;\n      this._addRectangleFloat(\n        this._vertices.selection,\n        0,\n        startCol * this._dimensions.scaledCellWidth,\n        model.viewportCappedStartRow * this._dimensions.scaledCellHeight,\n        (startRowEndCol - startCol) * this._dimensions.scaledCellWidth,\n        this._dimensions.scaledCellHeight,\n        this._selectionFloat\n      );\n\n      // Draw middle rows\n      const middleRowsCount = Math.max(model.viewportCappedEndRow - model.viewportCappedStartRow - 1, 0);\n      this._addRectangleFloat(\n        this._vertices.selection,\n        INDICES_PER_RECTANGLE,\n        0,\n        (model.viewportCappedStartRow + 1) * this._dimensions.scaledCellHeight,\n        terminal.cols * this._dimensions.scaledCellWidth,\n        middleRowsCount * this._dimensions.scaledCellHeight,\n        this._selectionFloat\n      );\n\n      // Draw final row\n      if (model.viewportCappedStartRow !== model.viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewportStartRow\n        const endCol = model.viewportEndRow === model.viewportCappedEndRow ? model.endCol : terminal.cols;\n        this._addRectangleFloat(\n          this._vertices.selection,\n          INDICES_PER_RECTANGLE * 2,\n          0,\n          model.viewportCappedEndRow * this._dimensions.scaledCellHeight,\n          endCol * this._dimensions.scaledCellWidth,\n          this._dimensions.scaledCellHeight,\n          this._selectionFloat\n        );\n      } else {\n        fill(this._vertices.selection, 0, INDICES_PER_RECTANGLE * 2);\n      }\n    }\n  }\n\n  public updateBackgrounds(model: IRenderModel): void {\n    const terminal = this._terminal;\n    const vertices = this._vertices;\n\n    let rectangleCount = 1;\n\n    for (let y = 0; y < terminal.rows; y++) {\n      let currentStartX = -1;\n      let currentBg = 0;\n      let currentFg = 0;\n      let currentInverse = false;\n      for (let x = 0; x < terminal.cols; x++) {\n        const modelIndex = ((y * terminal.cols) + x) * RENDER_MODEL_INDICIES_PER_CELL;\n        const bg = model.cells[modelIndex + RENDER_MODEL_BG_OFFSET];\n        const fg = model.cells[modelIndex + RENDER_MODEL_FG_OFFSET];\n        const inverse = !!(fg & FgFlags.INVERSE);\n        if (bg !== currentBg || (fg !== currentFg && (currentInverse || inverse))) {\n          // A rectangle needs to be drawn if going from non-default to another color\n          if (currentBg !== 0 || (currentInverse && currentFg !== 0)) {\n            const offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n            this._updateRectangle(vertices, offset, currentFg, currentBg, currentStartX, x, y);\n          }\n          currentStartX = x;\n          currentBg = bg;\n          currentFg = fg;\n          currentInverse = inverse;\n        }\n      }\n      // Finish rectangle if it's still going\n      if (currentBg !== 0 || (currentInverse && currentFg !== 0)) {\n        const offset = rectangleCount++ * INDICES_PER_RECTANGLE;\n        this._updateRectangle(vertices, offset, currentFg, currentBg, currentStartX, terminal.cols, y);\n      }\n    }\n    vertices.count = rectangleCount;\n  }\n\n  private _updateRectangle(vertices: IVertices, offset: number, fg: number, bg: number, startX: number, endX: number, y: number): void {\n    let rgba: number | undefined;\n    if (fg & FgFlags.INVERSE) {\n      switch (fg & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          rgba = this._colors.ansi[fg & Attributes.PCOLOR_MASK].rgba;\n          break;\n        case Attributes.CM_RGB:\n          rgba = (fg & Attributes.RGB_MASK) << 8;\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          rgba = this._colors.foreground.rgba;\n      }\n    } else {\n      switch (bg & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          rgba = this._colors.ansi[bg & Attributes.PCOLOR_MASK].rgba;\n          break;\n        case Attributes.CM_RGB:\n          rgba = (bg & Attributes.RGB_MASK) << 8;\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          rgba = this._colors.background.rgba;\n      }\n    }\n\n    if (vertices.attributes.length < offset + 4) {\n      vertices.attributes = expandFloat32Array(vertices.attributes, this._terminal.rows * this._terminal.cols * INDICES_PER_RECTANGLE);\n    }\n    const x1 = startX * this._dimensions.scaledCellWidth;\n    const y1 = y * this._dimensions.scaledCellHeight;\n    const r = ((rgba >> 24) & 0xFF) / 255;\n    const g = ((rgba >> 16) & 0xFF) / 255;\n    const b = ((rgba >> 8 ) & 0xFF) / 255;\n\n    this._addRectangle(vertices.attributes, offset, x1, y1, (endX - startX) * this._dimensions.scaledCellWidth, this._dimensions.scaledCellHeight, r, g, b, 1);\n  }\n\n  private _addRectangle(array: Float32Array, offset: number, x1: number, y1: number, width: number, height: number, r: number, g: number, b: number, a: number): void {\n    array[offset    ] = x1;\n    array[offset + 1] = y1;\n    array[offset + 2] = width;\n    array[offset + 3] = height;\n    array[offset + 4] = r;\n    array[offset + 5] = g;\n    array[offset + 6] = b;\n    array[offset + 7] = a;\n  }\n\n  private _addRectangleFloat(array: Float32Array, offset: number, x1: number, y1: number, width: number, height: number, color: Float32Array): void {\n    array[offset    ] = x1;\n    array[offset + 1] = y1;\n    array[offset + 2] = width;\n    array[offset + 3] = height;\n    array[offset + 4] = color[0];\n    array[offset + 5] = color[1];\n    array[offset + 6] = color[2];\n    array[offset + 7] = color[3];\n  }\n\n  private _colorToFloat32Array(color: IColor): Float32Array {\n    return new Float32Array([\n      ((color.rgba >> 24) & 0xFF) / 255,\n      ((color.rgba >> 16) & 0xFF) / 255,\n      ((color.rgba >> 8 ) & 0xFF) / 255,\n      ((color.rgba      ) & 0xFF) / 255\n    ]);\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\n * object and its components.\n */\nexport abstract class Disposable implements IDisposable {\n  protected _disposables: IDisposable[] = [];\n  protected _isDisposed: boolean = false;\n\n  constructor() {\n  }\n\n  /**\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\n   */\n  public dispose(): void {\n    this._isDisposed = true;\n    this._disposables.forEach(d => d.dispose());\n    this._disposables.length = 0;\n  }\n\n  /**\n   * Registers a disposable object.\n   * @param d The disposable to register.\n   * @returns The disposable.\n   */\n  public register<T extends IDisposable>(d: T): T {\n    this._disposables.push(d);\n    return d;\n  }\n\n  /**\n   * Unregisters a disposable object if it has been registered, if not do\n   * nothing.\n   * @param d The disposable to unregister.\n   */\n  public unregister<T extends IDisposable>(d: T): void {\n    const index = this._disposables.indexOf(d);\n    if (index !== -1) {\n      this._disposables.splice(index, 1);\n    }\n  }\n}\n\n/**\n * Dispose of all disposables in an array and set its length to 0.\n */\nexport function disposeArray(disposables: IDisposable[]): void {\n  disposables.forEach(d => d.dispose());\n  disposables.length = 0;\n}\n\n/**\n * Creates a disposable that will dispose of an array of disposables when disposed.\n */\nexport function getDisposeArrayDisposable(array: IDisposable[]): IDisposable {\n  return { dispose: () => disposeArray(array) };\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T, U = void> {\n  (arg1: T, arg2: U): void;\n}\n\nexport interface IEvent<T, U = void> {\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T, U = void> {\n  event: IEvent<T, U>;\n  fire(arg1: T, arg2: U): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\n  private _listeners: IListener<T, U>[] = [];\n  private _event?: IEvent<T, U>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T, U> {\n    if (!this._event) {\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(arg1: T, arg2: U): void {\n    const queue: IListener<T, U>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, arg1, arg2);\n    }\n  }\n\n  public dispose(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n    this._disposed = true;\n  }\n}\n\nexport function forwardEvent<T>(from: IEvent<T>, to: IEventEmitter<T>): IDisposable {\n  return from(e => to.fire(e));\n}\n"],"sourceRoot":""}